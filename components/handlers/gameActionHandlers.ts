import { GoogleGenAI } from "@google/genai";
import type { GameHistoryEntry, SaveData } from '../types';
import { buildEnhancedRagPrompt } from '../promptBuilder';
import { EntityExportManager } from '../utils/EntityExportManager';
import { createAutoTrimmedStoryLog } from '../utils/storyLogUtils';

export interface GameActionHandlersParams {
    ai: GoogleGenAI | null;
    selectedModel: string;
    systemInstruction: string;
    responseSchema: any;
    isUsingDefaultKey: boolean;
    userApiKeyCount: number;
    rotateKey: () => void;
    rehydratedChoices: string[];
    
    // State setters
    setIsLoading: (loading: boolean) => void;
    setChoices: (choices: string[]) => void;
    setCustomAction: (action: string) => void;
    setStoryLog: (log: string[] | ((prev: string[]) => string[])) => void;
    setGameHistory: (history: GameHistoryEntry[] | ((prev: GameHistoryEntry[]) => GameHistoryEntry[])) => void;
    setTurnCount: (count: number | ((prev: number) => number)) => void;
    setCurrentTurnTokens: (tokens: number) => void;
    setTotalTokens: (tokens: number | ((prev: number) => number)) => void;
    
    // Current state values
    gameHistory: GameHistoryEntry[];
    customRules: any[];
    ruleChanges: any;
    setRuleChanges: (changes: any) => void;
    parseStoryAndTags: (text: string, applySideEffects: boolean) => string;
    
    // Choice history tracking
    updateChoiceHistory: (choices: string[], selectedChoice?: string, context?: string) => void;
}

export const createGameActionHandlers = (params: GameActionHandlersParams) => {
    const {
        ai, selectedModel, systemInstruction, responseSchema,
        isUsingDefaultKey, userApiKeyCount, rotateKey, rehydratedChoices,
        setIsLoading, setChoices, setCustomAction, setStoryLog, setGameHistory,
        setTurnCount, setCurrentTurnTokens, setTotalTokens,
        gameHistory, customRules, ruleChanges, setRuleChanges, parseStoryAndTags,
        updateChoiceHistory
    } = params;

    // Create auto-trimmed story log functions
    const storyLogManager = createAutoTrimmedStoryLog(setStoryLog);

    const generateInitialStory = async (
        worldData: any,
        knownEntities: any,
        pcEntity: any,
        initialHistory: GameHistoryEntry[]
    ) => {
        if (!ai) return;
        setIsLoading(true);
        
        const finalPersonality = worldData.customPersonality || worldData.personalityFromList;
        const writingStyleText = worldData.writingStyle === 'first_person' ? 'Ng√¥i th·ª© nh·∫•t - Nh√¢n v·∫≠t ch√≠nh x∆∞ng "Ta/T√¥i"' : 'Ng√¥i th·ª© hai - "Ng∆∞∆°i" l√† nh√¢n v·∫≠t ch√≠nh';
        const nsfwInstruction = worldData.allowNsfw ? 'Cho ph√©p. K√≠ch ho·∫°t quy t·∫Øc n·ªôi dung 18+ c·ªßa Qu·∫£n Tr√≤. Vi·∫øt m·ªôt c√°ch tr·∫ßn tr·ª•i, b·∫°o l·ª±c, t·ª•c tƒ©u v√† kh√¥ng gi·ªõi h·∫°n.' : 'Kh√¥ng, AI ph·∫£i tr√°nh c√°c ch·ªß ƒë·ªÅ v√† m√¥ t·∫£ 18+.';
        
        const activeRules = customRules.filter(r => r.isActive);
        let customRulesContext = '';
        if (activeRules.length > 0) {
            customRulesContext = `\n--- TRI TH·ª®C & LU·∫¨T L·ªÜ T√ôY CH·ªàNH (ƒêANG √ÅP D·ª§NG) ---\n${activeRules.map(r => `- ${r.content}`).join('\n')}\n--- K·∫æT TH√öC ---\n`;
        }

        // B∆Ø·ªöC 2: S·ª¨ D·ª§NG LORE_CONCEPT ƒê√É T·∫†O
        const conceptEntities = Object.values(knownEntities).filter((e: any) => e.type === 'concept');
        let conceptContext = '';
        if (conceptEntities.length > 0) {
            conceptContext = `\n--- C√ÅC LORE_CONCEPT ƒê√É THI·∫æT L·∫¨P ---\n${conceptEntities.map((c: any) => `‚Ä¢ ${c.name}: ${c.description}`).join('\n')}\n--- K·∫æT TH√öC ---\n`;
        }

        if (!pcEntity) return;

        // Build skill information with mastery levels and descriptions
        let skillsWithMastery = '';
        if (pcEntity.learnedSkills && pcEntity.learnedSkills.length > 0) {
            const skillDetails = pcEntity.learnedSkills.map((skillName: string) => {
                const skillEntity = knownEntities[skillName];
                if (skillEntity) {
                    const mastery = skillEntity.mastery ? ` (${skillEntity.mastery})` : '';
                    const description = skillEntity.description ? ` - ${skillEntity.description}` : '';
                    return `${skillName}${mastery}${description}`;
                }
                return skillName;
            });
            skillsWithMastery = skillDetails.join('\n  ‚Ä¢ ');
        }

        const userPrompt = `${customRulesContext}${conceptContext}

B·∫†N L√Ä QU·∫¢N TR√í AI. T·∫°o c√¢u chuy·ªán m·ªü ƒë·∫ßu cho game RPG v·ªõi y√™u c·∫ßu sau:

--- TH√îNG TIN NH√ÇN V·∫¨T CH√çNH ---
T√™n: ${pcEntity.name}
Gi·ªõi t√≠nh: ${pcEntity.gender}
Ti·ªÉu s·ª≠: ${pcEntity.description}
T√≠nh c√°ch: ${pcEntity.personality}${pcEntity.motivation ? `\n**ƒê·ªòNG C∆†/M·ª§C TI√äU QUAN TR·ªåNG**: ${pcEntity.motivation}` : ''}${skillsWithMastery ? `\n**K·ª∏ NƒÇNG KH·ªûI ƒê·∫¶U**:\n  ‚Ä¢ ${skillsWithMastery}` : ''}

--- TH√îNG TIN TH·∫æ GI·ªöI ---
Th·∫ø gi·ªõi: ${worldData.worldName}
M√¥ t·∫£: ${worldData.worldDescription}
Th·ªùi gian: NƒÉm ${worldData.worldTime?.year || 1}, Th√°ng ${worldData.worldTime?.month || 1}, Ng√†y ${worldData.worldTime?.day || 1}
ƒê·ªãa ƒëi·ªÉm b·∫Øt ƒë·∫ßu: ${worldData.startLocation === 'Tu·ª≥ ch·ªçn' ? worldData.customStartLocation : worldData.startLocation || 'Kh√¥ng x√°c ƒë·ªãnh'}
Phong c√°ch vi·∫øt: ${writingStyleText}
N·ªôi dung 18+: ${nsfwInstruction}

--- Y√äU C·∫¶U VI·∫æT STORY ---
1. **NG√îN NG·ªÆ TUY·ªÜT ƒê·ªêI**: B·∫ÆT BU·ªòC 100% ti·∫øng Vi·ªát. KH√îNG d√πng ti·∫øng Anh tr·ª´ t√™n ri√™ng n∆∞·ªõc ngo√†i. Quan h·ªá nh√¢n v·∫≠t PH·∫¢I ti·∫øng Vi·ªát: "friend"‚Üí"b·∫°n", "enemy"‚Üí"k·∫ª th√π", "ally"‚Üí"ƒë·ªìng minh", "lover"‚Üí"ng∆∞·ªùi y√™u"
2. **CHI·ªÄU D√ÄI**: Ch√≠nh x√°c 300-400 t·ª´, chi ti·∫øt v√† s·ªëng ƒë·ªông  
3. **S·ª¨ D·ª§NG CONCEPT**: Ph·∫£i t√≠ch h·ª£p c√°c LORE_CONCEPT ƒë√£ thi·∫øt l·∫≠p v√†o c√¢u chuy·ªán m·ªôt c√°ch t·ª± nhi√™n
4. **THI·∫æT L·∫¨P B·ªêI C·∫¢NH**: T·∫°o t√¨nh hu·ªëng m·ªü ƒë·∫ßu th√∫ v·ªã, kh√¥ng qu√° drama${skillsWithMastery ? `\n5. **NH·∫ÆC ƒê·∫æN K·ª∏ NƒÇNG**: Ph·∫£i ƒë·ªÅ c·∫≠p ho·∫∑c th·ªÉ hi·ªán k·ªπ nƒÉng kh·ªüi ƒë·∫ßu c·ªßa nh√¢n v·∫≠t trong c√¢u chuy·ªán ho·∫∑c l·ª±a ch·ªçn, ch√∫ √Ω ƒë·∫øn m·ª©c ƒë·ªô th√†nh th·∫°o` : ''}${pcEntity.motivation ? `\n${skillsWithMastery ? '6' : '5'}. **PH·∫¢N √ÅNH ƒê·ªòNG C∆† NH√ÇN V·∫¨T**: C√¢u chuy·ªán v√† l·ª±a ch·ªçn ph·∫£i li√™n quan ƒë·∫øn ƒë·ªông c∆°/m·ª•c ti√™u c·ªßa nh√¢n v·∫≠t ch√≠nh: "${pcEntity.motivation}"` : ''}
${pcEntity.motivation && skillsWithMastery ? '7' : pcEntity.motivation || skillsWithMastery ? '6' : '5'}. **TIME_ELAPSED**: B·∫Øt bu·ªôc s·ª≠ d·ª•ng [TIME_ELAPSED: hours=0] 
${pcEntity.motivation && skillsWithMastery ? '8' : pcEntity.motivation || skillsWithMastery ? '7' : '6'}. **TH·∫∫ L·ªÜNH**: T·∫°o √≠t nh·∫•t 2-3 th·∫ª l·ªánh ph√π h·ª£p (LORE_LOCATION, LORE_NPC, STATUS_APPLIED_SELF...)
${pcEntity.motivation && skillsWithMastery ? '9' : pcEntity.motivation || skillsWithMastery ? '8' : '7'}. **L·ª∞A CH·ªåN**: T·∫°o 4-6 l·ª±a ch·ªçn h√†nh ƒë·ªông ƒëa d·∫°ng v√† th√∫ v·ªã${pcEntity.motivation ? `, m·ªôt s·ªë l·ª±a ch·ªçn ph·∫£i h∆∞·ªõng t·ªõi vi·ªác th·ª±c hi·ªán m·ª•c ti√™u: "${pcEntity.motivation}"` : ''}${skillsWithMastery ? `, v√† m·ªôt s·ªë l·ª±a ch·ªçn cho ph√©p s·ª≠ d·ª•ng k·ªπ nƒÉng kh·ªüi ƒë·∫ßu v·ªõi m·ª©c ƒë·ªô th√†nh th·∫°o ph√π h·ª£p` : ''}

H√£y t·∫°o m·ªôt c√¢u chuy·ªán m·ªü ƒë·∫ßu cu·ªën h√∫t${pcEntity.motivation ? ` v√† th·ªÉ hi·ªán r√µ ƒë·ªông c∆° "${pcEntity.motivation}" c·ªßa nh√¢n v·∫≠t` : ''}${skillsWithMastery ? `${pcEntity.motivation ? ', ' : ' v√† '}nh·∫Øc ƒë·∫øn ho·∫∑c cho ph√©p s·ª≠ d·ª•ng k·ªπ nƒÉng kh·ªüi ƒë·∫ßu v·ªõi m·ª©c ƒë·ªô th√†nh th·∫°o` : ''}!

**L∆ØU √ù CU·ªêI C√ôNG**: Ki·ªÉm tra k·ªπ l∆∞·ª°ng to√†n b·ªô output ƒë·ªÉ ƒë·∫£m b·∫£o 100% ti·∫øng Vi·ªát, kh√¥ng c√≥ t·ª´ ti·∫øng Anh n√†o!`;

        const finalHistory: GameHistoryEntry[] = [{ role: 'user', parts: [{ text: userPrompt }] }];
        setGameHistory(finalHistory);

        try {
            console.log('üìñ GenerateInitialStory: Making AI request with model:', selectedModel);
            console.log('üìñ GenerateInitialStory: System instruction length:', systemInstruction.length);
            console.log('üìñ GenerateInitialStory: Initial history:', finalHistory);
            
            const response = await ai.models.generateContent({
                model: selectedModel, 
                contents: finalHistory,
                config: { 
                    systemInstruction: systemInstruction, 
                    responseMimeType: "application/json", 
                    responseSchema: responseSchema 
                }
            });
            
            console.log('üìñ GenerateInitialStory: AI response received:', {
                hasText: !!response.text,
                textLength: response.text?.length || 0,
                usageMetadata: response.usageMetadata
            });
            
            const turnTokens = response.usageMetadata?.totalTokenCount || 0;
            setCurrentTurnTokens(turnTokens);
            setTotalTokens(prev => prev + turnTokens);

            const responseText = response.text?.trim() || '';
            
            if (!responseText) {
                console.error("üìñ GenerateInitialStory: API returned empty response text", {
                    responseMetadata: response.usageMetadata,
                    model: selectedModel,
                    responseObject: response
                });
                
                // Check for specific error conditions
                let errorMessage = "L·ªói: AI kh√¥ng th·ªÉ t·∫°o c√¢u chuy·ªán kh·ªüi ƒë·∫ßu.";
                
                if (response.usageMetadata?.totalTokenCount === 0) {
                    errorMessage += " C√≥ th·ªÉ do gi·ªõi h·∫°n token ho·∫∑c n·ªôi dung b·ªã l·ªçc.";
                } else if (!response.usageMetadata) {
                    errorMessage += " C√≥ th·ªÉ do l·ªói k·∫øt n·ªëi m·∫°ng.";
                }
                
                errorMessage += " Vui l√≤ng th·ª≠ t·∫°o l·∫°i th·∫ø gi·ªõi ho·∫∑c ki·ªÉm tra API key.";
                
                storyLogManager.update(prev => [...prev, errorMessage]);
                setChoices([]);
                return;
            }
            
            console.log('üìñ GenerateInitialStory: Response text received, length:', responseText.length);
            parseApiResponseHandler(responseText);
            setGameHistory(prev => [...prev, { role: 'model', parts: [{ text: responseText }] }]);
        } catch (error: any) {
            console.error("üìñ GenerateInitialStory: Error occurred:", {
                errorMessage: error.message,
                errorString: error.toString(),
                errorStack: error.stack,
                errorType: typeof error,
                isUsingDefaultKey,
                userApiKeyCount
            });
            
            if (!isUsingDefaultKey && userApiKeyCount > 1 && error.toString().includes('429')) {
                console.log("üìñ GenerateInitialStory: Rate limit detected, rotating key...");
                rotateKey();
                storyLogManager.update(prev => [...prev, "**‚≠ê L·ªói gi·ªõi h·∫°n y√™u c·∫ßu. ƒê√£ t·ª± ƒë·ªông chuy·ªÉn sang API Key ti·∫øp theo. Vui l√≤ng th·ª≠ l·∫°i h√†nh ƒë·ªông c·ªßa b·∫°n. ‚≠ê**"]);
                setChoices(rehydratedChoices);
            } else {
                console.error("üìñ GenerateInitialStory: Non-rate-limit error, showing error message");
                storyLogManager.set(["C√≥ l·ªói x·∫£y ra khi b·∫Øt ƒë·∫ßu c√¢u chuy·ªán. Vui l√≤ng th·ª≠ l·∫°i.", `Chi ti·∫øt l·ªói: ${error.message || error.toString()}`]);
            }
        } finally {
            console.log("üìñ GenerateInitialStory: Cleaning up, setting loading false");
            setIsLoading(false);
        }
    };

    const handleAction = async (action: string, currentGameState: SaveData) => {
        let originalAction = action.trim();
        let isNsfwRequest = false;
        
        const nsfwRegex = /\s+nsfw\s*$/i;
        if (nsfwRegex.test(originalAction)) {
            isNsfwRequest = true;
            originalAction = originalAction.replace(nsfwRegex, '').trim();
        }

        if (!originalAction || !ai) return;

        setIsLoading(true);
        setChoices([]);
        setCustomAction('');
        storyLogManager.update(prev => [...prev, `> ${originalAction}`]);
        
        // Track selected choice in history
        updateChoiceHistory([], originalAction, 'Player action executed');

        let ruleChangeContext = '';
        if (ruleChanges) {
            // Build context string from ruleChanges
            setRuleChanges(null); 
        }

        let nsfwInstructionPart = isNsfwRequest && currentGameState.worldData.allowNsfw ? `\nL∆ØU √ù ƒê·∫∂C BI·ªÜT: ...` : '';
        
        const userPrompt = buildEnhancedRagPrompt(originalAction, currentGameState, ruleChangeContext, nsfwInstructionPart);

        const newUserEntry: GameHistoryEntry = { role: 'user', parts: [{ text: userPrompt }] };
        const updatedHistory = [...gameHistory, newUserEntry];

        try {
            const response = await ai.models.generateContent({
                model: selectedModel, contents: updatedHistory,
                config: { systemInstruction: systemInstruction, responseMimeType: "application/json", responseSchema: responseSchema, }
            });
            const turnTokens = response.usageMetadata?.totalTokenCount || 0;
            setCurrentTurnTokens(turnTokens);
            setTotalTokens(prev => prev + turnTokens);

            const responseText = response.text?.trim() || '';
            
            if (!responseText) {
                console.error("API returned empty response text in handleAction", {
                    responseMetadata: response.usageMetadata,
                    model: selectedModel,
                    action: originalAction,
                    responseObject: response
                });
                
                // Check for specific error conditions
                let errorMessage = "L·ªói: AI kh√¥ng tr·∫£ v·ªÅ n·ªôi dung.";
                
                if (response.usageMetadata?.totalTokenCount === 0) {
                    errorMessage += " C√≥ th·ªÉ do gi·ªõi h·∫°n token ho·∫∑c n·ªôi dung b·ªã l·ªçc.";
                } else if (!response.usageMetadata) {
                    errorMessage += " C√≥ th·ªÉ do l·ªói k·∫øt n·ªëi m·∫°ng.";
                }
                
                errorMessage += " Vui l√≤ng th·ª≠ l·∫°i v·ªõi h√†nh ƒë·ªông kh√°c ho·∫∑c ki·ªÉm tra API key.";
                
                storyLogManager.update(prev => [...prev, errorMessage]);
                return;
            }
            
            setGameHistory(prev => [...prev, newUserEntry, { role: 'model', parts: [{ text: responseText }] }]);
            parseApiResponseHandler(responseText);
            
            setTurnCount(prev => {
                const newTurn = prev + 1;
                
                // üîÑ Auto-export entities every few turns (with unique ID to prevent duplicates)
                const exportId = `export_${newTurn}_${Date.now()}_${Math.random().toString(36)}`;
                
                setTimeout(async () => {
                    try {
                        if (EntityExportManager.shouldExport(newTurn, exportId)) {
                            const exportSuccess = await EntityExportManager.exportEntities(currentGameState, exportId);
                        }
                    } catch (error) {
                        console.error(`üö® [Turn ${newTurn}] Entity export error (ID: ${exportId}):`, error);
                    }
                }, 1000); // Delay to ensure state is updated
                
                
                return newTurn;
            }); 
        } catch (error: any) {
            console.error("Error continuing story:", error);
            setStoryLog(prev => prev.slice(0, -1));

            if (!isUsingDefaultKey && userApiKeyCount > 1 && error.toString().includes('429')) {
                rotateKey();
                storyLogManager.update(prev => [...prev, "**‚≠ê L·ªói gi·ªõi h·∫°n y√™u c·∫ßu. ƒê√£ t·ª± ƒë·ªông chuy·ªÉn sang API Key ti·∫øp theo. Vui l√≤ng th·ª≠ l·∫°i h√†nh ƒë·ªông c·ªßa b·∫°n. ‚≠ê**"]);
            } else {
                 storyLogManager.update(prev => [...prev, "L·ªói: AI kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ m·ªôt h√†nh ƒë·ªông kh√°c."]);
            }
        } finally {
            setIsLoading(false);
        }
    };

    const handleSuggestAction = async (storyLog: string[], currentGameState?: SaveData) => {
        if (!ai) return;
        setIsLoading(true);
        try {
            // Get the last few story entries for better context
            const recentStory = storyLog.slice(-3).join('\n\n');
            
            // Build a comprehensive prompt for action suggestion
            const suggestionPrompt = `B·∫°n l√† AI h·ªó tr·ª£ ng∆∞·ªùi ch∆°i trong game RPG. D·ª±a v√†o b·ªëi c·∫£nh c√¢u chuy·ªán g·∫ßn ƒë√¢y, h√£y g·ª£i √Ω m·ªôt h√†nh ƒë·ªông th√∫ v·ªã v√† s√°ng t·∫°o cho ng∆∞·ªùi ch∆°i.

=== B·ªêI C·∫¢NH GAN ƒê√ÇY ===
${recentStory}

=== Y√äU C·∫¶U ===
- G·ª£i √Ω 1 h√†nh ƒë·ªông c·ª• th·ªÉ, s√°ng t·∫°o v√† ph√π h·ª£p v·ªõi b·ªëi c·∫£nh
- H√†nh ƒë·ªông ph·∫£i ng·∫Øn g·ªçn, d√†i 10-20 t·ª´
- H√†nh ƒë·ªông ph·∫£i c√≥ th·ªÉ th·ª±c hi·ªán ƒë∆∞·ª£c trong t√¨nh hu·ªëng hi·ªán t·∫°i
- ƒê·ª´ng gi·∫£i th√≠ch hay th√™m g√¨ kh√°c, ch·ªâ tr·∫£ v·ªÅ h√†nh ƒë·ªông duy nh·∫•t

V√ç D·ª§:
- "Quan s√°t k·ªπ xung quanh ƒë·ªÉ t√¨m manh m·ªëi"
- "H·ªèi ng∆∞·ªùi ƒë·ªãa ph∆∞∆°ng v·ªÅ truy·ªÅn thuy·∫øt"
- "Th·ª≠ s·ª≠ d·ª•ng k·ªπ nƒÉng ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ"

H√£y g·ª£i √Ω h√†nh ƒë·ªông:`;

            const response = await ai.models.generateContent({
                model: selectedModel,
                contents: [{ role: 'user', parts: [{ text: suggestionPrompt }] }],
            });
            
            const suggestedAction = response.text?.trim() || 'Kh√¥ng th·ªÉ nh·∫≠n g·ª£i √Ω l√∫c n√†y.';
            
            // Clean up the response to remove quotes and extra formatting
            const cleanAction = suggestedAction
                .replace(/^["']|["']$/g, '') // Remove surrounding quotes
                .replace(/^- /, '') // Remove leading dash
                .trim();
                
            setCustomAction(cleanAction);
        } catch (error) {
            console.error("Error suggesting action:", error);
            setCustomAction("Kh√¥ng th·ªÉ nh·∫≠n g·ª£i √Ω l√∫c n√†y.");
        } finally {
            setIsLoading(false);
        }
    };

    const parseApiResponseHandler = (text: string) => {
        try {
            // Check if response is empty or whitespace only
            if (!text || text.trim().length === 0) {
                console.error("Empty AI response received");
                storyLogManager.update(prev => [...prev, "L·ªói: AI tr·∫£ v·ªÅ ph·∫£n h·ªìi tr·ªëng. H√£y th·ª≠ l·∫°i."]);
                setChoices([]);
                return;
            }
            
            // Clean the response text to remove any non-JSON content
            let cleanText = text.trim();
            
            // If response starts with markdown code block, extract JSON
            if (cleanText.startsWith('```json')) {
                const jsonMatch = cleanText.match(/```json\s*([\s\S]*?)\s*```/);
                if (jsonMatch) {
                    cleanText = jsonMatch[1].trim();
                }
            } else if (cleanText.startsWith('```')) {
                const jsonMatch = cleanText.match(/```\s*([\s\S]*?)\s*```/);
                if (jsonMatch) {
                    cleanText = jsonMatch[1].trim();
                }
            }
            
            // Try to find JSON object if response has extra text
            const jsonMatch = cleanText.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                cleanText = jsonMatch[0];
            }
            
            // Final check if cleanText is valid before parsing
            if (!cleanText || cleanText.length === 0) {
                console.error("No valid JSON found in response");
                storyLogManager.update(prev => [...prev, "L·ªói: Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong ph·∫£n h·ªìi. H√£y th·ª≠ l·∫°i."]);
                setChoices([]);
                return;
            }
            
            const jsonResponse = JSON.parse(cleanText);
            
            // Validate required fields
            if (!jsonResponse.story) {
                console.error("Missing story field in JSON response");
                storyLogManager.update(prev => [...prev, "L·ªói: Ph·∫£n h·ªìi thi·∫øu n·ªôi dung c√¢u chuy·ªán. H√£y th·ª≠ l·∫°i."]);
                setChoices([]);
                return;
            }
            
            const cleanStory = parseStoryAndTags(jsonResponse.story, true);
            storyLogManager.update(prev => [...prev, cleanStory]);
            const newChoices = jsonResponse.choices || [];
            setChoices(newChoices);
            
            // Track generated choices in history
            if (newChoices.length > 0) {
                // Create brief context from story for choice history
                const briefContext = cleanStory.length > 100 ? 
                    cleanStory.substring(0, 100) + '...' : 
                    cleanStory;
                updateChoiceHistory(newChoices, undefined, briefContext);
            }
        } catch (e) {
            console.error("Failed to parse AI response:", e, "Raw response:", text);
            storyLogManager.update(prev => [...prev, "L·ªói: AI tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. H√£y th·ª≠ l·∫°i."]);
            setChoices([]);
        }
    };

    return {
        generateInitialStory,
        handleAction,
        handleSuggestAction
    };
};