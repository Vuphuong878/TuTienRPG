import React, { useState, useEffect } from 'react';
import { CrossIcon } from './Icons.tsx';

export interface GameSettings {
    fontSize: number;
    fontFamily: string;
    memoryAutoClean: boolean;
    historyAutoCompress: boolean;
    themeColor: string;
    // Entity Export Settings
    entityExportEnabled: boolean;
    entityExportInterval: number;
    entityExportDebugLogging: boolean;
    // Entity Import Settings
    entityImportEnabled: boolean;
    entityAutoMergeOnImport: boolean;
    entityBackupBeforeImport: boolean;
}

const DEFAULT_SETTINGS: GameSettings = {
    fontSize: 16,
    fontFamily: 'Inter',
    memoryAutoClean: true,
    historyAutoCompress: true,
    themeColor: 'purple',
    // Entity Export Settings
    entityExportEnabled: true,
    entityExportInterval: 7,
    entityExportDebugLogging: true,
    // Entity Import Settings
    entityImportEnabled: true,
    entityAutoMergeOnImport: true,
    entityBackupBeforeImport: true,
};

const FONT_FAMILIES = [
    { value: 'Inter', label: 'Inter (M·∫∑c ƒë·ªãnh)' },
    { value: 'Merriweather', label: 'Merriweather (Serif)' },
    { value: 'Lora', label: 'Lora (Serif)' },
    { value: 'Roboto Mono', label: 'Roboto Mono (Monospace)' },
    { value: 'Source Code Pro', label: 'Source Code Pro (Monospace)' }
];

export const THEME_COLORS = [
    {
        id: 'dark-slate',
        name: 'ƒêen X√°m ƒê·∫≠m',
        description: 'T·ªëi tƒÉm v√† b√≠ ·∫©n',
        colors: {
            primary: 'from-slate-900 via-slate-800 to-slate-900',
            secondary: 'from-gray-800 to-slate-900',
            accent: 'from-slate-600 to-gray-700',
            text: 'slate-200'
        },
        preview: 'bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900'
    },
    {
        id: 'deep-blue',
        name: 'Xanh D∆∞∆°ng ƒê·∫≠m',
        description: 'S√¢u th·∫≥m nh∆∞ ƒë·∫°i d∆∞∆°ng',
        colors: {
            primary: 'from-slate-900 via-blue-900 to-slate-900',
            secondary: 'from-blue-800 to-slate-900',
            accent: 'from-blue-600 to-indigo-700',
            text: 'blue-200'
        },
        preview: 'bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900'
    },
    {
        id: 'purple',
        name: 'T√≠m Ho√†ng Gia',
        description: 'Hi·ªán t·∫°i (M·∫∑c ƒë·ªãnh)',
        colors: {
            primary: 'from-slate-900 via-purple-900 to-slate-900',
            secondary: 'from-purple-800 to-slate-900',
            accent: 'from-purple-600 to-pink-700',
            text: 'purple-200'
        },
        preview: 'bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900'
    },
    {
        id: 'emerald',
        name: 'Ng·ªçc L·ª•c B·∫£o',
        description: 'T∆∞∆°i m√°t v√† thanh l·ªãch',
        colors: {
            primary: 'from-slate-900 via-emerald-900 to-slate-900',
            secondary: 'from-emerald-800 to-slate-900',
            accent: 'from-emerald-600 to-teal-700',
            text: 'emerald-200'
        },
        preview: 'bg-gradient-to-br from-slate-900 via-emerald-900 to-slate-900'
    },
    {
        id: 'rose-gold',
        name: 'H·ªìng V√†ng',
        description: '·∫§m √°p v√† l√£ng m·∫°n',
        colors: {
            primary: 'from-slate-800 via-rose-900 to-orange-900',
            secondary: 'from-rose-800 to-orange-800',
            accent: 'from-rose-600 to-orange-600',
            text: 'rose-200'
        },
        preview: 'bg-gradient-to-br from-slate-800 via-rose-900 to-orange-900'
    },
    {
        id: 'sunset',
        name: 'Ho√†ng H√¥n',
        description: 'S√°ng s·ªßa nh∆∞ ho√†ng h√¥n',
        colors: {
            primary: 'from-orange-800 via-red-900 to-pink-800',
            secondary: 'from-red-700 to-pink-800',
            accent: 'from-orange-500 to-red-600',
            text: 'orange-200'
        },
        preview: 'bg-gradient-to-br from-orange-800 via-red-900 to-pink-800'
    }
];

export const GameSettingsModal: React.FC<{
    isOpen: boolean;
    onClose: () => void;
    settings: GameSettings;
    onSettingsChange: (settings: GameSettings) => void;
}> = ({ isOpen, onClose, settings, onSettingsChange }) => {
    const [localSettings, setLocalSettings] = useState<GameSettings>(() => ({
        ...DEFAULT_SETTINGS,
        ...settings
    }));

    useEffect(() => {
        setLocalSettings(prev => ({
            ...DEFAULT_SETTINGS,
            ...settings
        }));
    }, [settings]);

    if (!isOpen) return null;

    const handleSave = () => {
        onSettingsChange(localSettings);
        onClose();
    };

    const handleReset = () => {
        setLocalSettings(DEFAULT_SETTINGS);
    };

    return (
        <div className="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 p-4" onClick={onClose}>
            <div 
                className="bg-white/95 dark:bg-[#2a2f4c]/95 backdrop-blur-sm border-2 border-blue-400 rounded-lg shadow-2xl w-full max-w-2xl text-slate-900 dark:text-white max-h-[90vh] overflow-y-auto"
                onClick={e => e.stopPropagation()}
            >
                {/* Header */}
                <div className="p-6 border-b-2 border-blue-400 flex justify-between items-center">
                    <h3 className="text-2xl font-bold text-blue-600 dark:text-blue-400 flex items-center gap-3">
                        <span className="text-3xl">‚öôÔ∏è</span>
                        C√†i ƒê·∫∑t Game
                    </h3>
                    <button 
                        onClick={onClose} 
                        className="text-gray-500 dark:text-gray-400 hover:text-slate-900 dark:hover:text-white text-3xl leading-none"
                    >
                        <CrossIcon className="w-6 h-6"/>
                    </button>
                </div>

                {/* Content */}
                <div className="p-6 space-y-6">
                    {/* Font Settings */}
                    <div className="space-y-4">
                        <h4 className="text-lg font-semibold text-slate-800 dark:text-gray-100 border-b border-slate-300 dark:border-slate-600 pb-2">
                            üî§ C√†i ƒê·∫∑t Font
                        </h4>
                        
                        {/* Font Size */}
                        <div className="space-y-2">
                            <label className="block text-sm font-medium text-slate-700 dark:text-gray-300">
                                K√≠ch c·ª° font: {localSettings.fontSize}px
                            </label>
                            <div className="flex items-center gap-4">
                                <span className="text-sm text-slate-500">12px</span>
                                <input
                                    type="range"
                                    min="12"
                                    max="24"
                                    step="1"
                                    value={localSettings.fontSize || 16}
                                    onChange={(e) => setLocalSettings(prev => ({ ...prev, fontSize: parseInt(e.target.value) }))}
                                    className="flex-1 h-2 bg-slate-200 dark:bg-slate-700 rounded-lg appearance-none cursor-pointer slider"
                                />
                                <span className="text-sm text-slate-500">24px</span>
                            </div>
                            <div 
                                className="p-3 bg-slate-100 dark:bg-slate-800 rounded border text-center"
                                style={{ fontSize: `${localSettings.fontSize}px`, fontFamily: localSettings.fontFamily }}
                            >
                                ƒê√¢y l√† vƒÉn b·∫£n m·∫´u v·ªõi font hi·ªán t·∫°i
                            </div>
                        </div>

                        {/* Font Family */}
                        <div className="space-y-2">
                            <label className="block text-sm font-medium text-slate-700 dark:text-gray-300">
                                Lo·∫°i font
                            </label>
                            <select
                                value={localSettings.fontFamily || 'Inter'}
                                onChange={(e) => setLocalSettings(prev => ({ ...prev, fontFamily: e.target.value }))}
                                className="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-md bg-white dark:bg-slate-800 text-slate-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                            >
                                {FONT_FAMILIES.map(font => (
                                    <option key={font.value} value={font.value} style={{ fontFamily: font.value }}>
                                        {font.label}
                                    </option>
                                ))}
                            </select>
                        </div>
                    </div>

                    {/* Theme Color Settings */}
                    <div className="space-y-4">
                        <h4 className="text-lg font-semibold text-slate-800 dark:text-gray-100 border-b border-slate-300 dark:border-slate-600 pb-2">
                            üé® M√†u Ch·ªß ƒê·ªÅ
                        </h4>
                        
                        <div className="space-y-3">
                            <p className="text-sm text-slate-600 dark:text-slate-400">
                                Ch·ªçn b·∫£ng m√†u ƒë·ªÉ thay ƒë·ªïi giao di·ªán game
                            </p>
                            
                            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
                                {THEME_COLORS.map((theme) => (
                                    <button
                                        key={theme.id}
                                        onClick={() => setLocalSettings(prev => ({ ...prev, themeColor: theme.id }))}
                                        className={`relative p-4 rounded-xl border-2 transition-all duration-300 ${
                                            localSettings.themeColor === theme.id
                                                ? 'border-blue-500 shadow-lg scale-105'
                                                : 'border-slate-300 dark:border-slate-600 hover:border-blue-400 hover:scale-102'
                                        }`}
                                    >
                                        {/* Preview */}
                                        <div className={`w-full h-16 rounded-lg mb-3 ${theme.preview} relative overflow-hidden`}>
                                            {/* Floating orbs simulation */}
                                            <div className="absolute top-2 left-2 w-4 h-4 bg-white/20 rounded-full blur-sm"></div>
                                            <div className="absolute bottom-2 right-2 w-6 h-6 bg-white/10 rounded-full blur-md"></div>
                                            <div className="absolute top-1/2 left-1/2 w-3 h-3 bg-white/15 rounded-full blur-sm"></div>
                                        </div>
                                        
                                        {/* Theme Info */}
                                        <div className="text-left">
                                            <h5 className="font-semibold text-slate-800 dark:text-gray-100 text-sm">
                                                {theme.name}
                                            </h5>
                                            <p className="text-xs text-slate-600 dark:text-slate-400 mt-1">
                                                {theme.description}
                                            </p>
                                        </div>
                                        
                                        {/* Selected indicator */}
                                        {localSettings.themeColor === theme.id && (
                                            <div className="absolute top-2 right-2 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                                                <span className="text-white text-xs">‚úì</span>
                                            </div>
                                        )}
                                    </button>
                                ))}
                            </div>
                        </div>
                    </div>

                    {/* Performance Settings */}
                    <div className="space-y-4">
                        <h4 className="text-lg font-semibold text-slate-800 dark:text-gray-100 border-b border-slate-300 dark:border-slate-600 pb-2">
                            ‚ö° C√†i ƒê·∫∑t Hi·ªáu Su·∫•t
                        </h4>

                        {/* Memory Auto Clean */}
                        <div className="flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700">
                            <div className="flex-1">
                                <div className="flex items-center gap-2">
                                    <span className="text-lg">üßπ</span>
                                    <span className="font-semibold text-slate-800 dark:text-gray-100">
                                        T·ª± ƒë·ªông d·ªçn d·∫πp b·ªô nh·ªõ
                                    </span>
                                </div>
                                <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">
                                    T·ª± ƒë·ªông x√≥a c√°c th√¥ng tin c≈© ƒë·ªÉ gi·∫£m t·∫£i b·ªô nh·ªõ v√† c·∫£i thi·ªán hi·ªáu su·∫•t
                                </p>
                            </div>
                            <label className="relative inline-flex items-center cursor-pointer">
                                <input
                                    type="checkbox"
                                    checked={localSettings.memoryAutoClean ?? true}
                                    onChange={(e) => setLocalSettings(prev => ({ ...prev, memoryAutoClean: e.target.checked }))}
                                    className="sr-only peer"
                                />
                                <div className="w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-slate-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-slate-600 peer-checked:bg-blue-600"></div>
                            </label>
                        </div>

                        {/* History Auto Compress */}
                        <div className="flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700">
                            <div className="flex-1">
                                <div className="flex items-center gap-2">
                                    <span className="text-lg">üì¶</span>
                                    <span className="font-semibold text-slate-800 dark:text-gray-100">
                                        T·ª± ƒë·ªông n√©n l·ªãch s·ª≠
                                    </span>
                                </div>
                                <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">
                                    T·ª± ƒë·ªông n√©n l·ªãch s·ª≠ game c≈© ƒë·ªÉ ti·∫øt ki·ªám dung l∆∞·ª£ng l∆∞u tr·ªØ
                                </p>
                            </div>
                            <label className="relative inline-flex items-center cursor-pointer">
                                <input
                                    type="checkbox"
                                    checked={localSettings.historyAutoCompress ?? true}
                                    onChange={(e) => setLocalSettings(prev => ({ ...prev, historyAutoCompress: e.target.checked }))}
                                    className="sr-only peer"
                                />
                                <div className="w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-slate-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-slate-600 peer-checked:bg-blue-600"></div>
                            </label>
                        </div>
                    </div>

                    {/* Entity Export Settings */}
                    <div className="space-y-4">
                        <h4 className="text-lg font-semibold text-slate-800 dark:text-gray-100 border-b border-slate-300 dark:border-slate-600 pb-2">
                            üìÅ Xu·∫•t Entity T·ª± ƒê·ªông
                        </h4>

                        {/* Export Enabled */}
                        <div className="flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700">
                            <div className="flex-1">
                                <div className="flex items-center gap-2">
                                    <span className="text-lg">üöÄ</span>
                                    <span className="font-semibold text-slate-800 dark:text-gray-100">
                                        T·ª± ƒë·ªông xu·∫•t th√¥ng tin entity
                                    </span>
                                </div>
                                <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">
                                    T·ª± ƒë·ªông xu·∫•t th√¥ng tin nh√¢n v·∫≠t, v·∫≠t ph·∫©m, ƒë·ªãa ƒëi·ªÉm th√†nh file JSON ƒë·ªÉ ti·∫øt ki·ªám token
                                </p>
                            </div>
                            <label className="relative inline-flex items-center cursor-pointer">
                                <input
                                    type="checkbox"
                                    checked={localSettings.entityExportEnabled ?? true}
                                    onChange={(e) => setLocalSettings(prev => ({ ...prev, entityExportEnabled: e.target.checked }))}
                                    className="sr-only peer"
                                />
                                <div className="w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-slate-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-slate-600 peer-checked:bg-blue-600"></div>
                            </label>
                        </div>

                        {/* Export Interval */}
                        <div className="space-y-2">
                            <label className="block text-sm font-medium text-slate-700 dark:text-gray-300">
                                üîÑ T·∫ßn su·∫•t xu·∫•t: m·ªói {localSettings.entityExportInterval} l∆∞·ª£t
                            </label>
                            <div className="flex items-center gap-4">
                                <span className="text-sm text-slate-500">5</span>
                                <input
                                    type="range"
                                    min="5"
                                    max="15"
                                    step="1"
                                    value={localSettings.entityExportInterval || 7}
                                    onChange={(e) => setLocalSettings(prev => ({ ...prev, entityExportInterval: parseInt(e.target.value) }))}
                                    className="flex-1 h-2 bg-slate-200 dark:bg-slate-700 rounded-lg appearance-none cursor-pointer slider"
                                    disabled={!localSettings.entityExportEnabled}
                                />
                                <span className="text-sm text-slate-500">15</span>
                            </div>
                            <p className="text-xs text-slate-500 dark:text-slate-400">
                                Xu·∫•t file c√†ng th∆∞·ªùng xuy√™n th√¨ ti·∫øt ki·ªám token c√†ng nhi·ªÅu, nh∆∞ng t·∫°o nhi·ªÅu file h∆°n
                            </p>
                        </div>

                        {/* Debug Logging */}
                        <div className="flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700">
                            <div className="flex-1">
                                <div className="flex items-center gap-2">
                                    <span className="text-lg">üêõ</span>
                                    <span className="font-semibold text-slate-800 dark:text-gray-100">
                                        Debug logging
                                    </span>
                                </div>
                                <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">
                                    Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ qu√° tr√¨nh xu·∫•t entity trong Console
                                </p>
                            </div>
                            <label className="relative inline-flex items-center cursor-pointer">
                                <input
                                    type="checkbox"
                                    checked={localSettings.entityExportDebugLogging ?? true}
                                    onChange={(e) => setLocalSettings(prev => ({ ...prev, entityExportDebugLogging: e.target.checked }))}
                                    className="sr-only peer"
                                    disabled={!localSettings.entityExportEnabled}
                                />
                                <div className="w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-slate-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-slate-600 peer-checked:bg-blue-600 disabled:opacity-50"></div>
                            </label>
                        </div>
                    </div>

                    {/* Entity Import Settings */}
                    <div className="space-y-4">
                        <h4 className="text-lg font-semibold text-slate-800 dark:text-gray-100 border-b border-slate-300 dark:border-slate-600 pb-2">
                            üì• Nh·∫≠p Entity T·ª± ƒê·ªông
                        </h4>

                        {/* Import Enabled */}
                        <div className="flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700">
                            <div className="flex-1">
                                <div className="flex items-center gap-2">
                                    <span className="text-lg">üìÅ</span>
                                    <span className="font-semibold text-slate-800 dark:text-gray-100">
                                        Cho ph√©p nh·∫≠p entity t·ª´ file
                                    </span>
                                </div>
                                <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">
                                    B·∫≠t t√≠nh nƒÉng nh·∫≠p th√¥ng tin entity t·ª´ file JSON ƒë√£ xu·∫•t tr∆∞·ªõc ƒë√≥
                                </p>
                            </div>
                            <label className="relative inline-flex items-center cursor-pointer">
                                <input
                                    type="checkbox"
                                    checked={localSettings.entityImportEnabled ?? true}
                                    onChange={(e) => setLocalSettings(prev => ({ ...prev, entityImportEnabled: e.target.checked }))}
                                    className="sr-only peer"
                                />
                                <div className="w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-slate-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-slate-600 peer-checked:bg-blue-600"></div>
                            </label>
                        </div>

                        {/* Auto Merge */}
                        <div className="flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700">
                            <div className="flex-1">
                                <div className="flex items-center gap-2">
                                    <span className="text-lg">üîÑ</span>
                                    <span className="font-semibold text-slate-800 dark:text-gray-100">
                                        T·ª± ƒë·ªông merge khi c√≥ conflict
                                    </span>
                                </div>
                                <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">
                                    T·ª± ƒë·ªông k·∫øt h·ª£p th√¥ng tin khi entity ƒë√£ t·ªìn t·∫°i trong game
                                </p>
                            </div>
                            <label className="relative inline-flex items-center cursor-pointer">
                                <input
                                    type="checkbox"
                                    checked={localSettings.entityAutoMergeOnImport ?? true}
                                    onChange={(e) => setLocalSettings(prev => ({ ...prev, entityAutoMergeOnImport: e.target.checked }))}
                                    className="sr-only peer"
                                    disabled={!localSettings.entityImportEnabled}
                                />
                                <div className="w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-slate-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-slate-600 peer-checked:bg-blue-600 disabled:opacity-50"></div>
                            </label>
                        </div>

                        {/* Backup Before Import */}
                        <div className="flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700">
                            <div className="flex-1">
                                <div className="flex items-center gap-2">
                                    <span className="text-lg">üíæ</span>
                                    <span className="font-semibold text-slate-800 dark:text-gray-100">
                                        T·∫°o backup tr∆∞·ªõc khi import
                                    </span>
                                </div>
                                <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">
                                    T·ª± ƒë·ªông t·∫°o file backup c√°c entity hi·ªán t·∫°i tr∆∞·ªõc khi nh·∫≠p d·ªØ li·ªáu m·ªõi
                                </p>
                            </div>
                            <label className="relative inline-flex items-center cursor-pointer">
                                <input
                                    type="checkbox"
                                    checked={localSettings.entityBackupBeforeImport ?? true}
                                    onChange={(e) => setLocalSettings(prev => ({ ...prev, entityBackupBeforeImport: e.target.checked }))}
                                    className="sr-only peer"
                                    disabled={!localSettings.entityImportEnabled}
                                />
                                <div className="w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-slate-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-slate-600 peer-checked:bg-blue-600 disabled:opacity-50"></div>
                            </label>
                        </div>
                    </div>

                    {/* Current Settings Info */}
                    <div className="space-y-2 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700">
                        <h5 className="font-semibold text-blue-800 dark:text-blue-200 flex items-center gap-2">
                            <span>‚ÑπÔ∏è</span>
                            C√†i ƒë·∫∑t hi·ªán t·∫°i
                        </h5>
                        <div className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
                            <div>Font: {localSettings.fontFamily} - {localSettings.fontSize}px</div>
                            <div>M√†u ch·ªß ƒë·ªÅ: {THEME_COLORS.find(t => t.id === localSettings.themeColor)?.name || 'T√≠m Ho√†ng Gia'}</div>
                            <div>D·ªçn d·∫πp b·ªô nh·ªõ: {localSettings.memoryAutoClean ? '‚úÖ B·∫≠t' : '‚ùå T·∫Øt'}</div>
                            <div>N√©n l·ªãch s·ª≠: {localSettings.historyAutoCompress ? '‚úÖ B·∫≠t' : '‚ùå T·∫Øt'}</div>
                            <div>Xu·∫•t entity: {localSettings.entityExportEnabled ? '‚úÖ B·∫≠t' : '‚ùå T·∫Øt'}</div>
                            {localSettings.entityExportEnabled && (
                                <>
                                    <div>T·∫ßn su·∫•t xu·∫•t: M·ªói {localSettings.entityExportInterval} l∆∞·ª£t</div>
                                    <div>Debug logging: {localSettings.entityExportDebugLogging ? '‚úÖ B·∫≠t' : '‚ùå T·∫Øt'}</div>
                                </>
                            )}
                            <div>Nh·∫≠p entity: {localSettings.entityImportEnabled ? '‚úÖ B·∫≠t' : '‚ùå T·∫Øt'}</div>
                            {localSettings.entityImportEnabled && (
                                <>
                                    <div>Auto merge: {localSettings.entityAutoMergeOnImport ? '‚úÖ B·∫≠t' : '‚ùå T·∫Øt'}</div>
                                    <div>Backup tr∆∞·ªõc import: {localSettings.entityBackupBeforeImport ? '‚úÖ B·∫≠t' : '‚ùå T·∫Øt'}</div>
                                </>
                            )}
                        </div>
                    </div>
                </div>

                {/* Footer */}
                <div className="p-6 border-t border-slate-200 dark:border-slate-700 flex justify-between">
                    <button
                        onClick={handleReset}
                        className="px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-md font-semibold transition-colors duration-200 flex items-center gap-2"
                    >
                        üîÑ ƒê·∫∑t l·∫°i m·∫∑c ƒë·ªãnh
                    </button>
                    <div className="flex gap-3">
                        <button
                            onClick={onClose}
                            className="px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-md font-semibold transition-colors duration-200"
                        >
                            H·ªßy
                        </button>
                        <button
                            onClick={handleSave}
                            className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md font-semibold transition-colors duration-200 flex items-center gap-2"
                        >
                            üíæ L∆∞u c√†i ƒë·∫∑t
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};