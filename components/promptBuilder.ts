import type { SaveData, Entity, Status, Quest, GameHistoryEntry, CustomRule, KnownEntities } from './types.ts';
import { MBTI_PERSONALITIES } from './data/mbti.ts';
import { EnhancedRAG } from './utils/EnhancedRAG';
import { MemoryAnalytics } from './utils/MemoryAnalytics';
import { ReferenceBasedRAG, type CompactRAGContext } from './utils/ReferenceBasedRAG';

// Aggressive Token Management for 100k hard limit
const TOKEN_CONFIG = {
    MAX_TOKENS_PER_TURN: 90000,  // 90k hard limit with 10k buffer
    TOKEN_BUFFER: 10000,         // 10k safety buffer
    CHARS_PER_TOKEN: 1.2,        // Conservative token estimation
    
    // Aggressive allocation for strict 100k budget
    ALLOCATION: {
        CRITICAL: 0.50,      // 45k tokens - Party, action context only
        IMPORTANT: 0.25,     // 22.5k tokens - Essential entities, key quests
        CONTEXTUAL: 0.15,    // 13.5k tokens - Minimal world info
        SUPPLEMENTAL: 0.10   // 9k tokens - Rules, misc (reduced)
    },
    
    // Reference-based RAG settings
    USE_REFERENCE_RAG: true,     // Enable reference-based RAG for token efficiency
    REFERENCE_RAG_TOKEN_LIMIT: 600  // Max tokens for reference-based context
};

// Entity relevance scoring
interface EntityRelevance {
    entity: Entity;
    score: number;
    reason: string[];
}

// Memory with relevance scoring
interface ScoredMemory {
    memory: string;
    score: number;
    type: 'turn' | 'chapter' | 'memoir';
}

export class EnhancedRAGSystem {
    private semanticCache = new Map<string, Set<string>>();
    private entityGraph = new Map<string, Set<string>>();
    private currentGameState?: SaveData; // Store current game state for choice context
    
    constructor() {
        this.initializeSystem();
    }

    private initializeSystem() {
        // Initialize any preprocessing needed
    }

    // Main entry point - builds the enhanced RAG prompt
    public buildEnhancedPrompt(
        action: string,
        gameState: SaveData,
        ruleChangeContext: string = '',
        playerNsfwRequest: string = ''
    ): string {
        const startTime = performance.now();
        
        // Defensive check for gameState
        if (!gameState) {
            console.error('üö® buildEnhancedPrompt: gameState is null/undefined, using fallback');
            return `H√†nh ƒë·ªông: ${action}\nTr·∫°ng th√°i: L·ªói h·ªá th·ªëng, kh√¥ng th·ªÉ x·ª≠ l√Ω gameState.`;
        }
        
        try {
            // Store current game state for choice context
            this.currentGameState = gameState;
            
            // Step 1: Choose RAG strategy based on configuration
            let intelligentContext;
            let compactContext: CompactRAGContext | null = null;
            
            if (TOKEN_CONFIG.USE_REFERENCE_RAG) {
                // Use Reference-based RAG for token efficiency
                compactContext = ReferenceBasedRAG.buildCompactContext(gameState, action, {
                    maxMemories: 6,
                    maxTokens: TOKEN_CONFIG.REFERENCE_RAG_TOKEN_LIMIT,
                    importanceThreshold: 35,
                    recencyWeight: 0.3,
                    relevanceWeight: 0.5,
                    diversityWeight: 0.2,
                    includeArchived: false
                });
                
                // No traditional context needed when using reference RAG
                intelligentContext = null;
            } else {
                // Use traditional Enhanced RAG
                intelligentContext = EnhancedRAG.buildIntelligentContext(gameState, action, {
                    maxMemories: 5,
                    maxTokens: 1000,
                    importanceThreshold: 35,
                    recencyWeight: 0.3,
                    relevanceWeight: 0.5,
                    diversityWeight: 0.2,
                    includeArchived: false
                });
            }
            
            // Step 2: Analyze action intent
            const actionIntent = this.analyzeActionIntent(action);
            
            // Step 3: Build entity relationship graph
            this.buildEntityGraph(gameState.knownEntities);
            
            // Step 4: Score and retrieve relevant entities (enhanced with context)
            const relevantEntities = compactContext ? 
                // Use entity references from compact context when available
                compactContext.entityReferences.map(ref => ({
                    entity: ReferenceBasedRAG.getEntityByReference(ref.referenceId) || ref as any,
                    score: ref.relevanceScore,
                    reason: [`Reference: ${ref.referenceId}`]
                })).filter(e => e.entity) :
                // Traditional entity retrieval as fallback
                this.retrieveRelevantEntities(
                    action,
                    actionIntent,
                    gameState,
                    intelligentContext
                );
            
            // Step 5: Calculate dynamic token budgets (accounting for context type)
            const contextTokenUsage = compactContext ? 
                (compactContext.originalTokens - compactContext.tokensSaved) : 
                (intelligentContext?.tokenUsage || 0);
            const tokenBudget = this.calculateDynamicTokenBudget(
                relevantEntities,
                gameState,
                contextTokenUsage
            );
            
            // Step 5: Build context sections with priority
            const contextSections = this.buildPrioritizedContext(
                relevantEntities,
                gameState,
                tokenBudget
            );
            
            // Step 6: Assemble final prompt with appropriate context
            const finalPrompt = this.assembleFinalPrompt(
                action,
                contextSections,
                ruleChangeContext,
                playerNsfwRequest,
                gameState.worldData,
                intelligentContext,
                compactContext
            );
            
            const endTime = performance.now();
            console.log(`RAG processing time: ${(endTime - startTime).toFixed(2)}ms`);
            
            return this.enforceTokenLimit(finalPrompt);
            
        } catch (error) {
            console.error('Enhanced RAG Error:', error);
            // Fallback to basic prompt
            return this.buildFallbackPrompt(action, gameState);
        }
    }

    // Analyze the player's action to understand intent
    private analyzeActionIntent(action: string): ActionIntent {
        const lowerAction = action.toLowerCase();
        const intent: ActionIntent = {
            type: 'general',
            targets: [],
            keywords: [],
            isMovement: false,
            isCombat: false,
            isSocial: false,
            isItemUse: false,
            isSkillUse: false,
            isExploration: false
        };

        // Movement patterns
        if (/ƒëi|ch·∫°y|leo|nh·∫£y|bay|di chuy·ªÉn|t·ªõi|ƒë·∫øn|r·ªùi|v·ªÅ/.test(lowerAction)) {
            intent.isMovement = true;
            intent.type = 'movement';
        }

        // Combat patterns
        if (/t·∫•n c√¥ng|ƒë√°nh|ch√©m|ƒë√¢m|b·∫Øn|n√©m|chi·∫øn ƒë·∫•u|gi·∫øt/.test(lowerAction)) {
            intent.isCombat = true;
            intent.type = 'combat';
        }

        // Social patterns
        if (/n√≥i|h·ªèi|tr·∫£ l·ªùi|thuy·∫øt ph·ª•c|d·ªça|giao d·ªãch|mua|b√°n/.test(lowerAction)) {
            intent.isSocial = true;
            intent.type = 'social';
        }

        // Item use patterns
        if (/s·ª≠ d·ª•ng|d√πng|u·ªëng|ƒÉn|trang b·ªã|th√°o|cho|l·∫•y/.test(lowerAction)) {
            intent.isItemUse = true;
            intent.type = 'item_interaction';
        }

        // Skill use patterns
        if (/thi tri·ªÉn|s·ª≠ d·ª•ng.*ph√°p|c√¥ng ph√°p|k·ªπ nƒÉng/.test(lowerAction)) {
            intent.isSkillUse = true;
            intent.type = 'skill_use';
        }

        // Extract potential entity targets
        intent.targets = this.extractPotentialTargets(action);
        intent.keywords = this.extractKeywords(action);

        return intent;
    }

    // Build entity relationship graph for better retrieval
    private buildEntityGraph(entities: KnownEntities) {
        this.entityGraph.clear();
        
        if (!entities || typeof entities !== 'object') {
            return;
        }
        
        for (const [name, entity] of Object.entries(entities)) {
            const connections = new Set<string>();
            
            // Add connections based on entity properties
            if (entity.owner) connections.add(entity.owner);
            if (entity.location) connections.add(entity.location);
            
            // Parse description for entity mentions
            const description = (entity.description || '').toLowerCase();
            for (const [otherName, otherEntity] of Object.entries(entities)) {
                if (name !== otherName && description.includes(otherName.toLowerCase())) {
                    connections.add(otherName);
                }
            }
            
            // Special handling for NPCs with skills
            if (entity.skills && Array.isArray(entity.skills)) {
                entity.skills.forEach(skill => connections.add(skill));
            }
            
            this.entityGraph.set(name, connections);
        }
    }

    // Enhanced entity retrieval with relevance scoring
    private retrieveRelevantEntities(
        action: string,
        intent: ActionIntent,
        gameState: SaveData,
        intelligentContext?: any
    ): EntityRelevance[] {
        const { knownEntities, party, gameHistory, statuses } = gameState;
        const relevanceScores: EntityRelevance[] = [];
        
        // Always include party members with high relevance
        if (Array.isArray(party)) {
            party.forEach(member => {
                relevanceScores.push({
                    entity: member,
                    score: 100,
                    reason: ['Party member']
                });
            });
        }

        // Score all other entities
        for (const [name, entity] of Object.entries(knownEntities)) {
            if (Array.isArray(party) && party.some(p => p.name === name)) continue;
            
            let score = 0;
            const reasons: string[] = [];
            
            // Direct mention in action
            if (action.toLowerCase().includes(name.toLowerCase())) {
                score += 50;
                reasons.push('Directly mentioned');
            }
            
            // Mentioned in recent history (sliding window)
            const recentMentions = this.countRecentMentions(name, gameHistory, 3);
            if (recentMentions > 0) {
                score += Math.min(30, recentMentions * 10);
                reasons.push(`Recent mentions: ${recentMentions}`);
            }
            
            // Location matching for PC
            const pc = party.find(p => p.type === 'pc');
            if (pc?.location && entity.location === pc.location) {
                score += 20;
                reasons.push('Same location as PC');
            }
            
            // Type relevance based on intent
            score += this.getTypeRelevanceScore(entity.type, intent);
            
            // Enhanced companion skill matching
            if (entity.type === 'companion' && entity.skills) {
                const skillsArray = Array.isArray(entity.skills) ? entity.skills : entity.skills.split(',').map(s => s.trim());
                const skillMatch = this.getCompanionSkillRelevance(skillsArray, action, intent);
                score += skillMatch;
                if (skillMatch > 0) {
                    reasons.push(`Relevant skills: ${skillsArray.slice(0, 2).join(', ')}`);
                }
            }
            
            // Graph connections
            const connections = this.entityGraph.get(name) || new Set();
            const connectedToRelevant = Array.from(connections).some(conn => 
                relevanceScores.some(r => r.score > 50 && r.entity.name === conn)
            );
            if (connectedToRelevant) {
                score += 15;
                reasons.push('Connected to relevant entity');
            }
            
            // Status effects
            if (statuses.some(s => s.owner === name)) {
                score += 10;
                reasons.push('Has active status');
            }
            
            if (score > 0) {
                relevanceScores.push({ entity, score, reason: reasons });
            }
        }
        
        // Sort by relevance and apply cutoffs
        return relevanceScores
            .sort((a, b) => b.score - a.score)
            .filter(r => r.score >= 10); // Minimum relevance threshold
    }

    // Calculate dynamic token budgets based on context
    private calculateDynamicTokenBudget(
        relevantEntities: EntityRelevance[],
        gameState: SaveData,
        intelligentContextTokens: number = 0
    ): TokenBudget {
        const baseLimit = TOKEN_CONFIG.MAX_TOKENS_PER_TURN - TOKEN_CONFIG.TOKEN_BUFFER;
        
        // Analyze context complexity
        const hasActiveQuests = gameState.quests?.some(q => q.status === 'active') || false;
        const hasComplexHistory = gameState.gameHistory.length > 20;
        const hasManyCriticalEntities = relevantEntities.filter(r => r.score > 70).length > 5;
        
        // Adjust allocations based on context
        let criticalWeight = TOKEN_CONFIG.ALLOCATION.CRITICAL;
        let importantWeight = TOKEN_CONFIG.ALLOCATION.IMPORTANT;
        
        if (hasManyCriticalEntities) {
            criticalWeight += 0.1;
            importantWeight -= 0.05;
        }
        
        if (!hasActiveQuests) {
            importantWeight -= 0.05;
            criticalWeight += 0.05;
        }
        
        return {
            critical: Math.floor(baseLimit * criticalWeight),
            important: Math.floor(baseLimit * importantWeight),
            contextual: Math.floor(baseLimit * TOKEN_CONFIG.ALLOCATION.CONTEXTUAL),
            supplemental: Math.floor(baseLimit * TOKEN_CONFIG.ALLOCATION.SUPPLEMENTAL)
        };
    }

    // Build prioritized context sections
    private buildPrioritizedContext(
        relevantEntities: EntityRelevance[],
        gameState: SaveData,
        budget: TokenBudget
    ): ContextSections {
        const sections: ContextSections = {
            critical: '',
            important: '',
            contextual: '',
            supplemental: ''
        };

        // Critical: High-relevance entities and immediate context
        sections.critical = this.buildCriticalContext(
            relevantEntities.filter(r => r.score >= 70),
            gameState,
            budget.critical
        );

        // Important: Related entities, active quests, recent history
        sections.important = this.buildImportantContext(
            relevantEntities.filter(r => r.score >= 30 && r.score < 70),
            gameState,
            budget.important
        );

        // Contextual: World info, chronicle, memories
        sections.contextual = this.buildContextualInfo(
            gameState,
            budget.contextual
        );

        // Supplemental: Custom rules and additional context
        sections.supplemental = this.buildSupplementalContext(
            gameState,
            relevantEntities,
            budget.supplemental
        );

        return sections;
    }

    // Helper methods for context building
    private buildCriticalContext(
        entities: EntityRelevance[],
        gameState: SaveData,
        tokenBudget: number
    ): string {
        let context = "=== TRI TH·ª®C QUAN TR·ªåNG ===\n";
        let usedTokens = this.estimateTokens(context);
        
        // Add time and turn info
        const timeInfo = this.formatGameTime(gameState.gameTime, gameState.turnCount);
        context += timeInfo + "\n\n";
        usedTokens += this.estimateTokens(timeInfo);
        
        // Dedicated party section for enhanced coordination  
        const partyContext = this.buildEnhancedPartyContext(gameState, Math.floor(tokenBudget * 0.4));
        if (partyContext) {
            context += partyContext + "\n";
            usedTokens += this.estimateTokens(partyContext);
        }
        
        // Add remaining entities with detailed info
        const remainingBudget = tokenBudget - usedTokens;
        const nonPartyEntities = entities.filter(e => e.entity.type !== 'companion');
        const tokensPerEntity = Math.floor(remainingBudget / Math.max(1, nonPartyEntities.length));
        
        nonPartyEntities.forEach(({ entity, score, reason }) => {
            const entityText = this.formatEntityWithContext(
                entity,
                gameState.statuses,
                reason,
                tokensPerEntity,
                gameState
            );
            
            const entityTokens = this.estimateTokens(entityText);
            if (usedTokens + entityTokens <= tokenBudget) {
                context += entityText + "\n";
                usedTokens += entityTokens;
            }
        });
        
        return context;
    }
    
    // Enhanced party coordination context for better AI understanding
    private buildEnhancedPartyContext(gameState: SaveData, maxTokens: number): string {
        const { party, statuses } = gameState;
        
        if (!party || party.length === 0) return '';
        
        let context = "**T·ªî ƒê·ªòI PHI·ªÄU L∆ØU:**\n";
        let usedTokens = this.estimateTokens(context);
        
        // Log AI context building for debugging
        if (gameState.turnCount) {
            import('./utils/partyDebugger').then(({ partyDebugger }) => {
                partyDebugger.logAIContextBuild({
                    companions: party.filter(p => p.type === 'companion'),
                    contextLength: context.length,
                    includesPersonalities: party.some(p => p.personality),
                    includesSkills: party.some(p => p.skills),
                    includesRelationships: party.some(p => p.relationship)
                }, usedTokens, gameState.turnCount);
            });
        }
        
        // PC information first
        const pc = party.find(p => p.type === 'pc');
        if (pc) {
            const pcStatuses = statuses.filter(s => s.owner === 'pc' || s.owner === pc.name);
            let pcInfo = `[Nh√¢n v·∫≠t ch√≠nh] ${pc.name}`;
            
            const pcDetails: string[] = [];
            // EMPHASIZE MOTIVATION FIRST
            if (pc.motivation) pcDetails.push(`**M·ª§C TI√äU**: ${pc.motivation}`);
            if (pc.location) pcDetails.push(`V·ªã tr√≠: ${pc.location}`);
            if (pc.realm) pcDetails.push(`Th·ª±c l·ª±c: ${pc.realm}`);
            if (pc.learnedSkills && pc.learnedSkills.length > 0) {
                const skillsWithMastery = pc.learnedSkills.map(skillName => {
                    const skillEntity = Object.values(gameState.knownEntities).find((e: any) => e.name === skillName && e.type === 'skill');
                    if (skillEntity && skillEntity.mastery) {
                        return `${skillName} (${skillEntity.mastery})`;
                    }
                    return skillName;
                });
                pcDetails.push(`K·ªπ nƒÉng: ${skillsWithMastery.join(', ')}`);
            }
            if (pcStatuses.length > 0) {
                pcDetails.push(`Tr·∫°ng th√°i: ${pcStatuses.map(s => s.name).join(', ')}`);
            }
            
            if (pcDetails.length > 0) {
                pcInfo += ` - ${pcDetails.join(', ')}`;
            }
            pcInfo += '\n';
            
            const pcTokens = this.estimateTokens(pcInfo);
            if (usedTokens + pcTokens <= maxTokens) {
                context += pcInfo;
                usedTokens += pcTokens;
            }
        }
        
        // Companions with detailed coordination info
        const companions = party.filter(p => p.type === 'companion');
        if (companions.length > 0) {
            companions.forEach(companion => {
                let companionInfo = `[ƒê·ªìng h√†nh] ${companion.name}`;
                
                const companionDetails: string[] = [];
                
                // Relationship status (critical for party dynamics)
                if (companion.relationship) {
                    companionDetails.push(`Quan h·ªá: ${companion.relationship}`);
                }
                
                // Power level for tactical coordination
                if (companion.realm) {
                    companionDetails.push(`C·∫£nh gi·ªõi: ${companion.realm}`);
                }
                
                // Key skills for party synergy
                if (companion.skills && companion.skills.length > 0) {
                    const skillsArray = Array.isArray(companion.skills) ? companion.skills : companion.skills.split(',').map(s => s.trim());
                    companionDetails.push(`Chuy√™n m√¥n: ${skillsArray.slice(0, 2).join(', ')}`);
                }
                
                // Active status effects
                const companionStatuses = statuses.filter(s => s.owner === companion.name);
                if (companionStatuses.length > 0) {
                    companionDetails.push(`Tr·∫°ng th√°i: ${companionStatuses.map(s => s.name).join(', ')}`);
                }
                
                // Core personality for AI roleplay
                if (companion.personality) {
                    const personalitySnippet = companion.personality.length > 50 
                        ? companion.personality.substring(0, 50) + '...' 
                        : companion.personality;
                    companionDetails.push(`T√≠nh c√°ch: ${personalitySnippet}`);
                }
                
                if (companionDetails.length > 0) {
                    companionInfo += ` - ${companionDetails.join(', ')}`;
                }
                companionInfo += '\n';
                
                const companionTokens = this.estimateTokens(companionInfo);
                if (usedTokens + companionTokens <= maxTokens) {
                    context += companionInfo;
                    usedTokens += companionTokens;
                }
            });
            
            // Party coordination notes
            const coordNote = "\n*L∆∞u √Ω: H√£y ch√∫ tr·ªçng ƒë·∫øn s·ª± t∆∞∆°ng t√°c v√† ph·ªëi h·ª£p gi·ªØa c√°c th√†nh vi√™n trong t·ªï ƒë·ªôi. M·ªói ƒë·ªìng h√†nh c√≥ c√° t√≠nh v√† k·ªπ nƒÉng ri√™ng, h√£y th·ªÉ hi·ªán ƒëi·ªÅu n√†y trong c√¢u chuy·ªán.*\n";
            const noteTokens = this.estimateTokens(coordNote);
            if (usedTokens + noteTokens <= maxTokens) {
                context += coordNote;
            }
        }
        
        return context;
    }

    private buildImportantContext(
        entities: EntityRelevance[],
        gameState: SaveData,
        tokenBudget: number
    ): string {
        let context = "\n=== TH√îNG TIN LI√äN QUAN ===\n";
        let usedTokens = this.estimateTokens(context);
        
        // Active quests
        const questContext = this.buildQuestContext(
            (gameState.quests || []).filter(q => q.status === 'active'),
            Math.floor(tokenBudget * 0.3)
        );
        context += questContext;
        usedTokens += this.estimateTokens(questContext);
        
        // Recent history with smart summarization
        const historyContext = this.buildSmartHistoryContext(
            gameState.gameHistory,
            Math.floor(tokenBudget * 0.4)
        );
        context += historyContext;
        usedTokens += this.estimateTokens(historyContext);
        
        // Related entities
        const remainingBudget = tokenBudget - usedTokens;
        const tokensPerEntity = Math.floor(remainingBudget / Math.max(1, entities.length));
        
        entities.forEach(({ entity, reason }) => {
            const entityText = this.formatEntityBrief(entity, reason, tokensPerEntity);
            const entityTokens = this.estimateTokens(entityText);
            
            if (usedTokens + entityTokens <= tokenBudget) {
                context += entityText + "\n";
                usedTokens += entityTokens;
            }
        });
        
        return context;
    }

    // Utility methods
    private estimateTokens(text: string): number {
        return Math.ceil(text.length * TOKEN_CONFIG.CHARS_PER_TOKEN);
    }

    private countRecentMentions(name: string, history: GameHistoryEntry[], lookback: number): number {
        const recentEntries = history.slice(-lookback * 2); // User + model entries
        let count = 0;
        
        recentEntries.forEach(entry => {
            const text = entry.parts[0].text.toLowerCase();
            const regex = new RegExp(`\\b${name.toLowerCase()}\\b`, 'g');
            const matches = text.match(regex);
            count += matches ? matches.length : 0;
        });
        
        return count;
    }

    private getTypeRelevanceScore(type: string, intent: ActionIntent): number {
        const relevanceMatrix: Record<string, Record<string, number>> = {
            'combat': { 'npc': 20, 'item': 15, 'skill': 25, 'companion': 35 }, // Higher for companions in combat
            'social': { 'npc': 30, 'companion': 40, 'faction': 20 }, // Companions excel in social situations
            'item_interaction': { 'item': 30, 'skill': 10, 'companion': 15 }, // Companions may have opinions
            'movement': { 'location': 30, 'npc': 10, 'companion': 25 }, // Companions travel together
            'skill_use': { 'skill': 40, 'item': 10, 'companion': 30 }, // Companions can assist with skills
            'general': { 'npc': 10, 'item': 10, 'location': 10, 'companion': 20 } // Always include companions
        };
        
        return relevanceMatrix[intent.type]?.[type] || 0;
    }

    // NEW: Enhanced skill relevance scoring for companions
    private getCompanionSkillRelevance(skills: string[], action: string, intent: ActionIntent): number {
        let score = 0;
        const actionLower = action.toLowerCase();
        
        // Combat skill relevance
        const combatSkills = ['chi·∫øn ƒë·∫•u', 't·∫•n c√¥ng', 'ph√≤ng th·ªß', 'ki·∫øm thu·∫≠t', 'v√µ thu·∫≠t', 'magic', 'ph√°p thu·∫≠t'];
        if (intent.isCombat && skills.some(skill => 
            combatSkills.some(combat => skill.toLowerCase().includes(combat)))) {
            score += 25;
        }
        
        // Social skill relevance  
        const socialSkills = ['thuy·∫øt ph·ª•c', 'giao ti·∫øp', 'ƒë√†m ph√°n', 'l√£nh ƒë·∫°o', 'charm'];
        if (intent.isSocial && skills.some(skill => 
            socialSkills.some(social => skill.toLowerCase().includes(social)))) {
            score += 20;
        }
        
        // Direct skill mention in action
        for (const skill of skills) {
            if (actionLower.includes(skill.toLowerCase())) {
                score += 30;
                break;
            }
        }
        
        // Movement and exploration skills
        const explorationSkills = ['do th√°m', 'stealth', 'survival', 'navigation', 'tracking'];
        if (intent.isMovement && skills.some(skill => 
            explorationSkills.some(explore => skill.toLowerCase().includes(explore)))) {
            score += 15;
        }
        
        return score;
    }

    private extractPotentialTargets(action: string): string[] {
        // Extract quoted strings and proper nouns
        const targets: string[] = [];
        
        // Extract quoted targets
        const quotedMatches = action.match(/"([^"]+)"/g);
        if (quotedMatches) {
            targets.push(...quotedMatches.map(m => m.replace(/"/g, '')));
        }
        
        // Extract capitalized words (potential entity names)
        const words = action.split(/\s+/);
        words.forEach(word => {
            if (word.length > 2 && /^[A-Z√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê]/.test(word)) {
                targets.push(word);
            }
        });
        
        return [...new Set(targets)];
    }

    private extractKeywords(action: string): string[] {
        const stopWords = new Set(['v√†', 'c·ªßa', 'l√†', 'trong', 'v·ªõi', 'ƒë·ªÉ', 'ƒë·∫øn', 't·ª´']);
        const words = action.toLowerCase().split(/\s+/)
            .filter(w => w.length > 2 && !stopWords.has(w));
        
        return [...new Set(words)];
    }

    private formatGameTime(time: any, turnCount: number): string {
        return `Th·ªùi gian: NƒÉm ${time.year} Th√°ng ${time.month} Ng√†y ${time.day}, ${time.hour} gi·ªù (L∆∞·ª£t ${turnCount})`;
    }

    // UPDATED: Aggressive truncation for token control
    private aggressiveTruncation(text: string, maxTokens: number): string {
        const estimatedTokens = this.estimateTokens(text);
        
        if (estimatedTokens <= maxTokens) {
            return text;
        }
        
        // Aggressive character limit
        const charLimit = Math.floor(maxTokens / TOKEN_CONFIG.CHARS_PER_TOKEN * 0.9); // 90% safety margin
        
        if (text.length <= charLimit) {
            return text;
        }
        
        // Priority truncation - keep first and last parts
        const keepStart = Math.floor(charLimit * 0.6);
        const keepEnd = Math.floor(charLimit * 0.3);
        
        if (keepStart + keepEnd < text.length) {
            return text.substring(0, keepStart) + "\n...[n·ªôi dung ƒë√£ ƒë∆∞·ª£c r√∫t g·ªçn]...\n" + text.substring(text.length - keepEnd);
        }
        
        return text.substring(0, charLimit) + '...';
    }

    // NEW: Build smart choice generation context
    private buildSmartChoiceContext(
        sections: ContextSections,
        compactContext?: CompactRAGContext | null,
        intelligentContext?: any
    ): string | null {
        if (!this.currentGameState) return null;
        
        const gameState = this.currentGameState;
        let context = "\n--- H∆Ø·ªöNG D·∫™N T·∫†O L·ª∞A CH·ªåN TH√îNG MINH ---\n";
        
        // 1. Choice history context to prevent repetition
        const choiceHistoryContext = this.buildChoiceHistoryContext(gameState);
        if (choiceHistoryContext) {
            context += choiceHistoryContext + "\n";
        }
        
        // 2. Situational context for relevant choices
        const situationalContext = this.buildSituationalChoiceContext(gameState, sections);
        if (situationalContext) {
            context += situationalContext + "\n";
        }
        
        // 3. Party-based choice suggestions
        const partyChoiceContext = this.buildPartyChoiceContext(gameState);
        if (partyChoiceContext) {
            context += partyChoiceContext + "\n";
        }
        
        // 4. Goal-oriented choice context
        const goalContext = this.buildGoalOrientedChoiceContext(gameState);
        if (goalContext) {
            context += goalContext + "\n";
        }
        
        context += "**QUAN TR·ªåNG**: L·ª±a ch·ªçn ph·∫£i ph√π h·ª£p v·ªõi t√¨nh hu·ªëng hi·ªán t·∫°i, kh√¥ng l·∫∑p l·∫°i nh·ªØng g√¨ ƒë√£ ch·ªçn g·∫ßn ƒë√¢y, v√† t·∫°o c∆° h·ªôi ph√°t tri·ªÉn c√¢u chuy·ªán theo h∆∞·ªõng th√∫ v·ªã.";
        
        return context;
    }
    
    // Build choice history context to avoid repetition
    private buildChoiceHistoryContext(gameState: SaveData): string | null {
        const choiceHistory = gameState.choiceHistory || [];
        if (choiceHistory.length === 0) return null;
        
        // Get recent choices (last 3 turns)
        const recentChoices = choiceHistory
            .filter(entry => gameState.turnCount - entry.turn <= 3)
            .flatMap(entry => entry.choices)
            .slice(-10); // Last 10 choices max
        
        if (recentChoices.length === 0) return null;
        
        let context = "**Tr√°nh l·∫∑p l·∫°i c√°c l·ª±a ch·ªçn g·∫ßn ƒë√¢y:**\n";
        recentChoices.forEach((choice, index) => {
            context += `‚Ä¢ ${choice}\n`;
        });
        
        return context;
    }
    
    // Build situational context based on current location and entities
    private buildSituationalChoiceContext(gameState: SaveData, sections: ContextSections): string | null {
        const pc = gameState.party?.find(p => p.type === 'pc');
        if (!pc) return null;
        
        let context = "**T·∫°o l·ª±a ch·ªçn ph√π h·ª£p v·ªõi t√¨nh hu·ªëng:**\n";
        let suggestions: string[] = [];
        
        // Location-based suggestions
        if (pc.location) {
            const locationEntity = gameState.knownEntities[pc.location];
            if (locationEntity) {
                suggestions.push(`Khai th√°c ƒë·∫∑c ƒëi·ªÉm c·ªßa ƒë·ªãa ƒëi·ªÉm "${pc.location}"`);
            }
        }
        
        // Active quest suggestions
        const activeQuests = gameState.quests?.filter(q => q.status === 'active') || [];
        if (activeQuests.length > 0) {
            suggestions.push(`T·∫°o l·ª±a ch·ªçn ti·∫øn tri·ªÉn nhi·ªám v·ª•: "${activeQuests[0].title}"`);
        }
        
        // Available skills suggestions
        if (pc.learnedSkills && pc.learnedSkills.length > 0) {
            const skillsWithMastery = pc.learnedSkills.map(skillName => {
                const skillEntity = Object.values(gameState.knownEntities).find((e: any) => e.name === skillName && e.type === 'skill');
                if (skillEntity && skillEntity.mastery) {
                    return `${skillName} (${skillEntity.mastery})`;
                }
                return skillName;
            });
            suggestions.push(`Cho ph√©p s·ª≠ d·ª•ng k·ªπ nƒÉng: ${skillsWithMastery.slice(0, 2).join(', ')}`);
        }
        
        // Social interaction suggestions based on nearby NPCs
        const nearbyNPCs = Object.values(gameState.knownEntities)
            .filter(entity => entity.type === 'npc' && entity.location === pc.location)
            .slice(0, 2);
        
        if (nearbyNPCs.length > 0) {
            suggestions.push(`T∆∞∆°ng t√°c v·ªõi: ${nearbyNPCs.map(npc => npc.name).join(', ')}`);
        }
        
        if (suggestions.length > 0) {
            context += suggestions.map(s => `‚Ä¢ ${s}`).join('\n') + '\n';
            return context;
        }
        
        return null;
    }
    
    // Build party-based choice context for companion interactions
    private buildPartyChoiceContext(gameState: SaveData): string | null {
        const companions = gameState.party?.filter(p => p.type === 'companion') || [];
        if (companions.length === 0) return null;
        
        let context = "**T·∫°o l·ª±a ch·ªçn t∆∞∆°ng t√°c v·ªõi ƒë·ªìng h√†nh:**\n";
        let suggestions: string[] = [];
        
        companions.forEach(companion => {
            // Suggest choices based on companion's skills and personality
            if (companion.skills && companion.skills.length > 0) {
                const skillsArray = Array.isArray(companion.skills) ? companion.skills : companion.skills.split(',').map(s => s.trim());
                suggestions.push(`Nh·ªù ${companion.name} s·ª≠ d·ª•ng chuy√™n m√¥n: ${skillsArray[0]}`);
            }
            
            // Relationship-based suggestions
            if (companion.relationship) {
                suggestions.push(`Trao ƒë·ªïi v·ªõi ${companion.name} d·ª±a tr√™n m·ªëi quan h·ªá: ${companion.relationship}`);
            }
        });
        
        if (suggestions.length > 0) {
            context += suggestions.slice(0, 2).map(s => `‚Ä¢ ${s}`).join('\n') + '\n';
            return context;
        }
        
        return null;
    }
    
    // Build goal-oriented choice context based on PC motivation
    private buildGoalOrientedChoiceContext(gameState: SaveData): string | null {
        const pc = gameState.party?.find(p => p.type === 'pc');
        if (!pc || !pc.motivation) return null;
        
        return `**T·∫°o l·ª±a ch·ªçn h∆∞·ªõng t·ªõi m·ª•c ti√™u nh√¢n v·∫≠t:**\n‚Ä¢ √çt nh·∫•t 1-2 l·ª±a ch·ªçn ph·∫£i li√™n quan ƒë·∫øn vi·ªác th·ª±c hi·ªán m·ª•c ti√™u: "${pc.motivation}"\n‚Ä¢ T·∫°o c∆° h·ªôi ti·∫øn g·∫ßn h∆°n ƒë·∫øn m·ª•c ti√™u ho·∫∑c gi·∫£i quy·∫øt tr·ªü ng·∫°i c·∫£n tr·ªü m·ª•c ti√™u\n`;
    }

    // ENHANCED: Special handling for party members with detailed context
    private formatEntityWithContext(
        entity: Entity,
        statuses: Status[],
        reasons: string[],
        maxTokens: number,
        gameState: SaveData
    ): string {
        let text = `‚Ä¢ ${entity.name} (${entity.type})`;
        
        const details: string[] = [];
        
        // Enhanced party member context
        if (entity.type === 'companion') {
            text += ` [ƒê·ªíNG H√ÄNH]`;
            
            // Core personality and motivation for companions
            if (entity.personality) details.push(`T√≠nh c√°ch: ${entity.personality}`);
            if (entity.personalityMbti && MBTI_PERSONALITIES[entity.personalityMbti]) {
                details.push(`MBTI: ${entity.personalityMbti} (${MBTI_PERSONALITIES[entity.personalityMbti].title})`);
            }
            if (entity.motivation) details.push(`ƒê·ªông c∆°: ${entity.motivation}`);
            
            // Relationship with PC (critical for party dynamics)
            if (entity.relationship) {
                details.push(`Quan h·ªá v·ªõi PC: ${entity.relationship}`);
            }
            
            // Skills and abilities (important for party coordination)
            if (entity.skills?.length) {
                const skillsArray = Array.isArray(entity.skills) ? entity.skills : entity.skills.split(',').map(s => s.trim());
                details.push(`K·ªπ nƒÉng: ${skillsArray.slice(0, 4).join(', ')}`);
            }
            
            // Power level for tactical decisions
            if (entity.realm) details.push(`C·∫£nh gi·ªõi: ${entity.realm}`);
            
        } else if (entity.type === 'pc') {
            // Player Character - EMPHASIZE MOTIVATION
            text += ` [NH√ÇN V·∫¨T CH√çNH]`;
            if (entity.motivation) details.push(`**M·ª§C TI√äU QUAN TR·ªåNG**: ${entity.motivation}`);
            if (entity.learnedSkills && entity.learnedSkills.length > 0) {
                const skillsWithMastery = entity.learnedSkills.map(skillName => {
                    const skillEntity = Object.values(gameState.knownEntities).find((e: any) => e.name === skillName && e.type === 'skill');
                    if (skillEntity && skillEntity.mastery) {
                        return `${skillName} (${skillEntity.mastery})`;
                    }
                    return skillName;
                });
                details.push(`K·ªπ nƒÉng: ${skillsWithMastery.join(', ')}`);
            }
            if (entity.personality) details.push(`T√≠nh c√°ch: ${entity.personality}`);
            if (entity.personalityMbti) details.push(`MBTI: ${entity.personalityMbti}`);
        } else if (entity.type === 'npc') {
            // Standard NPC context (reduced for non-party members)
            if (entity.personality) details.push(`T√≠nh c√°ch: ${entity.personality}`);
            if (entity.personalityMbti) details.push(`MBTI: ${entity.personalityMbti}`);
            if (entity.motivation) details.push(`ƒê·ªông c∆°: ${entity.motivation}`);
            if (entity.skills?.length) {
                // Handle both string and array formats for skills
                const skillsArray = Array.isArray(entity.skills) ? entity.skills : entity.skills.split(',').map(s => s.trim());
                const skillsText = `K·ªπ nƒÉng: ${skillsArray.slice(0, 3).join(', ')}`;
                details.push(skillsText);
                console.log(`üéØ Prompt Builder - NPC "${entity.name}" skills in prompt:`, skillsText);
            } else {
                console.log(`üéØ Prompt Builder - NPC "${entity.name}" has no skills (entity.skills:`, entity.skills, ')');
            }
        }
        
        if (entity.location) details.push(`V·ªã tr√≠: ${entity.location}`);
        if (entity.realm && entity.type !== 'companion') details.push(`C·∫£nh gi·ªõi: ${entity.realm}`);
        
        // Enhanced status effects for party members
        const entityStatuses = statuses.filter(s => s.owner === entity.name);
        if (entityStatuses.length > 0) {
            if (entity.type === 'companion') {
                // More detailed status for companions
                details.push(`Tr·∫°ng th√°i: ${entityStatuses.map(s => `${s.name} (${s.type})`).slice(0, 3).join(', ')}`);
            } else {
                details.push(`Tr·∫°ng th√°i: ${entityStatuses.map(s => s.name).slice(0, 2).join(', ')}`);
            }
        }
        
        // Description with priority for companions
        if (entity.description) {
            const remainingTokens = Math.max(0, maxTokens - this.estimateTokens(text + details.join('; ')));
            const threshold = entity.type === 'companion' ? 50 : 30; // Higher threshold for companions
            
            if (remainingTokens > threshold) {
                const truncatedDesc = this.aggressiveTruncation(entity.description, remainingTokens);
                details.push(`M√¥ t·∫£: ${truncatedDesc}`);
            }
        }
        
        return text + "\n  " + details.join("\n  ");
    }

    private formatEntityBrief(entity: Entity, reasons: string[], maxTokens: number): string {
        const base = `‚Ä¢ ${entity.name} (${entity.type})`;
        const reasonText = reasons.length > 0 ? ` [${reasons[0]}]` : '';
        const description = entity.description ? ` - ${entity.description}` : '';
        
        const fullText = base + reasonText + description;
        return this.aggressiveTruncation(fullText, maxTokens);
    }

    private buildQuestContext(quests: Quest[], maxTokens: number): string {
        if (quests.length === 0) return '';
        
        let context = "**Nhi·ªám v·ª• ƒëang ho·∫°t ƒë·ªông:**\n";
        let usedTokens = this.estimateTokens(context);
        
        quests.forEach(quest => {
            const activeObjectives = quest.objectives.filter(o => !o.completed);
            const questText = `- ${quest.title}: ${activeObjectives.map(o => o.description).join(', ')}\n`;
            const questTokens = this.estimateTokens(questText);
            
            if (usedTokens + questTokens <= maxTokens) {
                context += questText;
                usedTokens += questTokens;
            }
        });
        
        return context + "\n";
    }

    // UPDATED: More aggressive history context reduction
    private buildSmartHistoryContext(history: GameHistoryEntry[], maxTokens: number): string {
        let context = "**Di·ªÖn bi·∫øn g·∫ßn ƒë√¢y:**\n";
        let usedTokens = this.estimateTokens(context);
        
        const recentEvents: string[] = [];
        const lookback = Math.min(1, history.length); // Gi·∫£m t·ª´ 2 xu·ªëng 1
        
        for (let i = history.length - lookback; i < history.length; i++) {
            const entry = history[i];
            if (entry.role === 'user') {
                const actionMatch = entry.parts[0].text.match(/--- H√ÄNH ƒê·ªòNG C·ª¶A NG∆Ø·ªúI CH∆†I ---\n"([^"]+)"/);
                if (actionMatch) {
                    // Truncate action n·∫øu qu√° d√†i
                    const action = actionMatch[1];
                    const shortAction = action.length > 100 ? action.substring(0, 100) + '...' : action;
                    recentEvents.push(`> ${shortAction}`);
                }
            } else {
                try {
                    const parsed = JSON.parse(entry.parts[0].text);
                    if (parsed.story) {
                        const summary = this.summarizeStory(parsed.story);
                        if (summary) {
                            // Truncate summary
                            const shortSummary = summary.length > 150 ? summary.substring(0, 150) + '...' : summary;
                            recentEvents.push(shortSummary);
                        }
                    }
                } catch (e) {
                    // Skip
                }
            }
        }
        
        // Add events v·ªõi limit ch·∫∑t ch·∫Ω h∆°n
        recentEvents.forEach(event => {
            const eventTokens = this.estimateTokens(event + '\n');
            if (usedTokens + eventTokens <= maxTokens * 0.8) { // Ch·ªâ d√πng 80% token budget
                context += event + '\n';
                usedTokens += eventTokens;
            }
        });
        
        return context + "\n";
    }

    private summarizeStory(story: string): string {
        // Extract key information from story
        // This is simplified - could use more sophisticated NLP
        const sentences = story.split(/[.!?]+/).filter(s => s.trim().length > 10);
        
        // Look for sentences with important keywords
        const importantKeywords = /chi·∫øn ƒë·∫•u|gi·∫øt|ch·∫øt|nh·∫≠n ƒë∆∞·ª£c|m·∫•t|th√†nh c√¥ng|th·∫•t b·∫°i|ph√°t hi·ªán|g·∫∑p/;
        const importantSentences = sentences.filter(s => importantKeywords.test(s));
        
        if (importantSentences.length > 0) {
            return importantSentences[0].trim() + '.';
        }
        
        return sentences[0]?.trim() + '.' || '';
    }

    private buildContextualInfo(gameState: SaveData, maxTokens: number): string {
        let context = "\n=== B·ªêI C·∫¢NH TH·∫æ GI·ªöI ===\n";
        let usedTokens = this.estimateTokens(context);
        
        // World info - reference only
        if (gameState.worldData.worldName) {
            context += `Th·∫ø gi·ªõi: ${gameState.worldData.worldName}\n\n`;
            usedTokens += this.estimateTokens(context);
        }
        
        // Chronicle (prioritized memories)
        const chronicleTokens = Math.floor((maxTokens - usedTokens) * 0.4);
        const chronicleContext = this.buildChronicleContext(gameState.chronicle, chronicleTokens);
        context += chronicleContext;
        usedTokens += this.estimateTokens(chronicleContext);
        
        // Pinned memories
        const memoryTokens = maxTokens - usedTokens;
        const pinnedMemories = gameState.memories?.filter(m => m.pinned) || [];
        
        if (pinnedMemories.length > 0 && memoryTokens > 100) {
            context += "**K√Ω ·ª©c quan tr·ªçng:**\n";
            pinnedMemories.slice(0, 1).forEach(mem => { // Reduced to 1 memory only
                const memText = `- ${mem.text}\n`;
                const memTokens = this.estimateTokens(memText);
                
                if (memTokens <= memoryTokens) {
                    context += memText;
                    memoryTokens - memTokens;
                }
            });
        }
        
        return context;
    }

    // UPDATED: Reduced chronicle entries
    private buildChronicleContext(chronicle: any, maxTokens: number): string {
        const memories: ScoredMemory[] = [];
        
        // Aggressive reduction for token savings
        chronicle.memoir.slice(-2).forEach((m: string) => memories.push({ memory: m, score: 100, type: 'memoir' })); // Reduced to 2
        chronicle.chapter.slice(-1).forEach((c: string) => memories.push({ memory: c, score: 70, type: 'chapter' })); // Reduced to 1
        // chronicle.turn removed completely to save tokens
        
        // Sort by score and build context
        memories.sort((a, b) => b.score - a.score);
        
        let context = "**Bi√™n ni√™n s·ª≠:**\n";
        let usedTokens = this.estimateTokens(context);
        
        memories.forEach(({ memory, type }) => {
            const prefix = type === 'memoir' ? '[H·ªìi k√Ω] ' : type === 'chapter' ? '[Ch∆∞∆°ng] ' : '[L∆∞·ª£t] ';
            const memText = `${prefix}${memory}\n`;
            const memTokens = this.estimateTokens(memText);
            
            if (usedTokens + memTokens <= maxTokens) {
                context += memText;
                usedTokens += memTokens;
            }
        });
        
        return context + "\n";
    }

    private buildSupplementalContext(
        gameState: SaveData,
        relevantEntities: EntityRelevance[],
        maxTokens: number
    ): string {
        let context = "";
        let usedTokens = 0;
        
        // Custom rules
        const activeRules = gameState.customRules.filter(r => r.isActive && r.content.trim());
        
        if (activeRules.length > 0) {
            // Find relevant rules based on entities and keywords
            const relevantRules = this.findRelevantRules(activeRules, relevantEntities);
            
            if (relevantRules.length > 0) {
                context += "\n=== LU·∫¨T L·ªÜ T√ôY CH·ªàNH LI√äN QUAN ===\n";
                usedTokens += this.estimateTokens(context);
                
                relevantRules.forEach(rule => {
                    const ruleText = `- ${rule.content}\n`;
                    const ruleTokens = this.estimateTokens(ruleText);
                    
                    if (usedTokens + ruleTokens <= maxTokens) {
                        context += ruleText;
                        usedTokens += ruleTokens;
                    }
                });
            }
        }
        
        return context;
    }

    private findRelevantRules(rules: CustomRule[], entities: EntityRelevance[]): CustomRule[] {
        const entityNames = new Set(entities.map(e => e.entity.name.toLowerCase()));
        
        return rules.filter(rule => {
            const ruleLower = rule.content.toLowerCase();
            
            // Check if rule mentions any relevant entity
            for (const name of entityNames) {
                if (ruleLower.includes(name)) return true;
            }
            
            // Check for general relevance keywords
            const generalKeywords = ['t·∫•t c·∫£', 'm·ªçi', 'lu√¥n', 'kh√¥ng ƒë∆∞·ª£c', 'ph·∫£i'];
            return generalKeywords.some(keyword => ruleLower.includes(keyword));
        });
    }

    private assembleFinalPrompt(
        action: string,
        sections: ContextSections,
        ruleChangeContext: string,
        nsfwContext: string,
        worldData: any,
        intelligentContext?: any,
        compactContext?: CompactRAGContext | null
    ): string {
        let prompt = "";
        
        // Rule changes first (highest priority)
        if (ruleChangeContext) {
            prompt += ruleChangeContext + "\n";
        }
        
        // Critical context
        prompt += sections.critical + "\n";
        
        // Phase 4: Intelligent Context (before important context)
        if (compactContext) {
            // Use compact reference-based context ONLY
            prompt += ReferenceBasedRAG.formatCompactContextForPrompt(compactContext) + "\n";
            console.log(`üîó Using Reference-based RAG: ${compactContext.tokensSaved} tokens saved (${((compactContext.tokensSaved / compactContext.originalTokens) * 100).toFixed(1)}% reduction)`);
        } else if (intelligentContext && intelligentContext.relevantMemories.length > 0) {
            // Use traditional enhanced RAG context (fallback only)
            prompt += EnhancedRAG.formatContextForPrompt(intelligentContext) + "\n";
        }
        
        // Important context
        prompt += sections.important + "\n";
        
        // Contextual information
        prompt += sections.contextual + "\n";
        
        // Supplemental context
        if (sections.supplemental) {
            prompt += sections.supplemental + "\n";
        }
        
        // Player action
        prompt += `\n--- H√ÄNH ƒê·ªòNG C·ª¶A NG∆Ø·ªúI CH∆†I ---\n"${action}"`;
        
        // Add smart choice generation context
        const choiceContext = this.buildSmartChoiceContext(sections, compactContext, intelligentContext);
        if (choiceContext) {
            prompt += `\n${choiceContext}`;
        }
        
        // NSFW context if applicable
        if (nsfwContext) {
            prompt += `\n${nsfwContext}`;
        } else if (worldData.allowNsfw) {
            prompt += `\nL∆ØU √ù: Ch·∫ø ƒë·ªô NSFW ƒëang B·∫¨T.`;
        }
        
        prompt += `
Y√äU C·∫¶U: Ti·∫øp t·ª•c c√¢u chuy·ªán d·ª±a tr√™n h√†nh ƒë·ªông v√† tri th·ª©c ƒë√£ truy xu·∫•t.

**NG√îN NG·ªÆ B·∫ÆT BU·ªòC:**
-B·∫ÆT BU·ªòC s·ª≠ d·ª•ng 100% ti·∫øng Vi·ªát trong to√†n b·ªô n·ªôi dung (story, choices, descriptions)
-TUY·ªÜT ƒê·ªêI KH√îNG d√πng ti·∫øng Anh tr·ª´ t√™n ri√™ng n∆∞·ªõc ngo√†i
-Quan h·ªá PH·∫¢I d√πng ti·∫øng Vi·ªát: "friend"‚Üí"b·∫°n b√®", "enemy"‚Üí"k·∫ª th√π", "ally"‚Üí"ƒë·ªìng minh", "lover"‚Üí"ng∆∞·ªùi y√™u", "family"‚Üí"gia ƒë√¨nh", "master"‚Üí"s∆∞ ph·ª•", "rival"‚Üí"ƒë·ªëi th·ªß"
-Ki·ªÉm tra k·ªπ l∆∞·ª°ng ƒë·ªÉ kh√¥ng c√≥ t·ª´ ti·∫øng Anh n√†o l·ªçt v√†o c√¢u chuy·ªán
-Tuy·ªát ƒë·ªëi kh√¥ng l·∫≠p l·∫°i h√†nh ƒë·ªông c·ªßa NPC ·ªü l∆∞·ª£t tr∆∞·ªõc v√†o l∆∞·ª£t n√†y.

H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG TAG K·ª∏ NƒÇNG:
- Khi m·ªôt k·ªπ nƒÉng ƒë∆∞·ª£c THAY ƒê·ªîI/N√ÇNG C·∫§P/GI·∫¢I PHONG ·∫§N: S·ª≠ d·ª•ng [SKILL_UPDATE: oldSkill="t√™n k·ªπ nƒÉng c≈©" newSkill="t√™n k·ªπ nƒÉng m·ªõi" target="t√™n nh√¢n v·∫≠t" description="m√¥ t·∫£ k·ªπ nƒÉng m·ªõi"]
- Khi h·ªçc k·ªπ nƒÉng HO√ÄN TO√ÄN M·ªöI (ch∆∞a t·ª´ng c√≥): S·ª≠ d·ª•ng [SKILL_LEARNED: name="t√™n k·ªπ nƒÉng" learner="t√™n nh√¢n v·∫≠t" description="m√¥ t·∫£"]
- KH√îNG BAO GI·ªú t·∫°o k·ªπ nƒÉng tr√πng l·∫∑p - lu√¥n d√πng SKILL_UPDATE ƒë·ªÉ thay th·∫ø k·ªπ nƒÉng c≈©
- V√≠ d·ª•: "Thi√™n H·ªì Huy·ªÖn Linh B√≠ Ph√°p (ƒëang phong ·∫•n)" ‚Üí "Thi√™n H·ªì Huy·ªÖn Linh B√≠ Ph√°p (S∆° Gi·∫£i)" ph·∫£i d√πng SKILL_UPDATE`;
        
        return prompt;
    }

    private truncateWithTokenLimit(text: string, maxTokens: number): string {
        const estimatedTokens = this.estimateTokens(text);
        
        if (estimatedTokens <= maxTokens) {
            return text;
        }
        
        // Calculate character limit based on token limit
        const charLimit = Math.floor(maxTokens / TOKEN_CONFIG.CHARS_PER_TOKEN);
        
        if (text.length <= charLimit) {
            return text;
        }
        
        // Smart truncation - try to break at sentence boundaries
        const truncated = text.substring(0, charLimit);
        const lastPeriod = truncated.lastIndexOf('.');
        const lastComma = truncated.lastIndexOf(',');
        const lastSpace = truncated.lastIndexOf(' ');
        
        let breakPoint = Math.max(lastPeriod, lastComma, lastSpace);
        if (breakPoint < charLimit * 0.8) {
            breakPoint = charLimit;
        }
        
        return text.substring(0, breakPoint) + '...';
    }

    // ADDED: Emergency truncation method
    private emergencyTruncation(prompt: string): string {
        const totalTokens = this.estimateTokens(prompt);
        const hardLimit = 85000; // Emergency limit well under 100k
        
        if (totalTokens <= hardLimit) {
            return prompt;
        }
        
        console.warn(`üö® EMERGENCY TRUNCATION: ${totalTokens} -> ${hardLimit}`);
        
        // Keep only critical sections
        const lines = prompt.split('\n');
        const criticalMarkers = ['=== TRI TH·ª®C QUAN TR·ªåNG ===', '--- H√ÄNH ƒê·ªòNG C·ª¶A NG∆Ø·ªúI CH∆†I ---'];
        
        let emergencyPrompt = '';
        let inCriticalSection = false;
        
        for (const line of lines) {
            if (criticalMarkers.some(marker => line.includes(marker))) {
                inCriticalSection = true;
            }
            
            if (inCriticalSection) {
                emergencyPrompt += line + '\n';
                
                if (this.estimateTokens(emergencyPrompt) > hardLimit) {
                    break;
                }
            }
        }
        
        return emergencyPrompt;
    }

    // UPDATED: Enhanced token limit enforcement with hard limit
    private enforceTokenLimit(prompt: string): string {
        const totalTokens = this.estimateTokens(prompt);
        const softLimit = TOKEN_CONFIG.MAX_TOKENS_PER_TURN - TOKEN_CONFIG.TOKEN_BUFFER;
        const hardLimit = 85000; // Well under 100k
        
        if (totalTokens <= softLimit) {
            console.log(`‚úÖ Prompt tokens: ${totalTokens}/${softLimit} (Safe)`);
            return prompt;
        }
        
        if (totalTokens <= hardLimit) {
            console.warn(`‚ö†Ô∏è WARNING: Prompt near limit: ${totalTokens}/${hardLimit}`);
            return prompt;
        }
        
        // Emergency truncation with alert
        console.error(`üö® CRITICAL: Prompt exceeds limit: ${totalTokens}/${hardLimit}. Emergency truncation applied!`);
        alert(`üö® TOKEN LIMIT EXCEEDED!\nUsed: ${totalTokens}\nLimit: ${hardLimit}\nApplying emergency truncation.`);
        return this.emergencyTruncation(prompt);
    }

    private buildFallbackPrompt(action: string, gameState: SaveData): string {
        // Minimal prompt for error cases
        if (!gameState) {
            console.warn('üö® buildFallbackPrompt: gameState is null/undefined');
            return `H√†nh ƒë·ªông: ${action}\nTr·∫°ng th√°i: L·ªói h·ªá th·ªëng, kh√¥ng th·ªÉ x·ª≠ l√Ω.`;
        }
        
        const pc = gameState.party?.find(p => p.type === 'pc');
        const pcName = pc?.name || 'Nh√¢n v·∫≠t ch√≠nh';
        
        return `
Nh√¢n v·∫≠t: ${pcName}
V·ªã tr√≠: ${pc?.location || 'Kh√¥ng x√°c ƒë·ªãnh'}
L∆∞·ª£t: ${gameState.turnCount}

--- H√ÄNH ƒê·ªòNG C·ª¶A NG∆Ø·ªúI CH∆†I ---
"${action}"

Y√äU C·∫¶U: Ti·∫øp t·ª•c c√¢u chuy·ªán d·ª±a tr√™n h√†nh ƒë·ªông v√† tri th·ª©c ƒë√£ truy xu·∫•t.
-B·∫Øt bu·ªôc ph·∫£i s·ª≠ d·ª•ng 100% ti·∫øng vi·ªát tr·ª´ danh t·ª´ ri√™ng.
-Tuy·ªát ƒë·ªëi kh√¥ng l·∫≠p l·∫°i h√†nh ƒë·ªông c·ªßa NPC ·ªü l∆∞·ª£t tr∆∞·ªõc v√†o l∆∞·ª£t n√†y.

H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG TAG K·ª∏ NƒÇNG:
- Khi m·ªôt k·ªπ nƒÉng ƒë∆∞·ª£c THAY ƒê·ªîI/N√ÇNG C·∫§P/GI·∫¢I PHONG ·∫§N: S·ª≠ d·ª•ng [SKILL_UPDATE: oldSkill="t√™n k·ªπ nƒÉng c≈©" newSkill="t√™n k·ªπ nƒÉng m·ªõi" target="t√™n nh√¢n v·∫≠t" description="m√¥ t·∫£ k·ªπ nƒÉng m·ªõi"]
- Khi h·ªçc k·ªπ nƒÉng HO√ÄN TO√ÄN M·ªöI (ch∆∞a t·ª´ng c√≥): S·ª≠ d·ª•ng [SKILL_LEARNED: name="t√™n k·ªπ nƒÉng" learner="t√™n nh√¢n v·∫≠t" description="m√¥ t·∫£"]
- KH√îNG BAO GI·ªú t·∫°o k·ªπ nƒÉng tr√πng l·∫∑p - lu√¥n d√πng SKILL_UPDATE ƒë·ªÉ thay th·∫ø k·ªπ nƒÉng c≈©
- V√≠ d·ª•: "Thi√™n H·ªì Huy·ªÖn Linh B√≠ Ph√°p (ƒëang phong ·∫•n)" ‚Üí "Thi√™n H·ªì Huy·ªÖn Linh B√≠ Ph√°p (S∆° Gi·∫£i)" ph·∫£i d√πng SKILL_UPDATE`;

    }
}

// Type definitions for the enhanced system
interface ActionIntent {
    type: 'movement' | 'combat' | 'social' | 'item_interaction' | 'skill_use' | 'exploration' | 'general';
    targets: string[];
    keywords: string[];
    isMovement: boolean;
    isCombat: boolean;
    isSocial: boolean;
    isItemUse: boolean;
    isSkillUse: boolean;
    isExploration: boolean;
}

interface TokenBudget {
    critical: number;
    important: number;
    contextual: number;
    supplemental: number;
}

interface ContextSections {
    critical: string;
    important: string;
    contextual: string;
    supplemental: string;
}

// Export singleton instance
export const enhancedRAG = new EnhancedRAGSystem();

// Backward compatibility wrapper
export const buildEnhancedRagPrompt = (
    action: string,
    gameState: SaveData,
    ruleChangeContext = '',
    playerNsfwRequest = ''
): string => {
    return enhancedRAG.buildEnhancedPrompt(
        action,
        gameState,
        ruleChangeContext,
        playerNsfwRequest
    );
};